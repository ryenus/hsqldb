<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns6="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:id="builtin_functions">Built In Functions</title>

  <info>
    <authorgroup>
      <author>
        <personname><firstname>Fred</firstname><surname>Toussi</surname></personname>

        <affiliation>
          <orgname>The HSQL Development Group</orgname>
        </affiliation>
      </author>
    </authorgroup>

    <releaseinfo>$Revision: 734 $</releaseinfo>

    <pubdate>$Date: 2009-01-08 19:19:51 +0000 (Thu, 08 Jan 2009) $</pubdate>

    <keywordset>
      <keyword>Hsqldb</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>SQL</keyword>
    </keywordset>

    <legalnotice>
      <para>Copyright 2009 Fred Toussi. Permission is granted to distribute
      this document without any alteration under the terms of the HSQLDB
      license. Additional permission is granted to the HSQL Development Group
      to distribute this document with or without alterations under the terms
      of the HSQLDB license.</para>
    </legalnotice>
  </info>

  <section xml:id="builtin_functions_intro-sect">
    <title>Overview</title>

    <para>HyperSQL supports a wide range of built-in functions and allows
    user-defined functions written in SQL and Java languages.</para>

    <para>The built-in functions fall into three groups:</para>

    <para><itemizedlist>
        <listitem>
          <para>SQL Standard Functions</para>

          <para>A wide rang of functions defined by SQL/Foundation are
          supported. SQL/Foundation functions that have no parameter are
          called without empty parentheses. Functions with multiple parameters
          often use keywords instead of commas to separate the parameters.
          Many functions are overloaded. Among these, some have one or more
          optional parameters that can be omitted, while the return type of
          some functions is dependent upon the type of one of the
          parameters.</para>
        </listitem>

        <listitem>
          <para>JDBC Open Group CLI Functions</para>

          <para>These functions were defined as an extension to the CLI
          standard, which is the basis for ODBC and JDBC and supported by many
          database products. JDBC supports an escape mechanism to specify
          function calls in SQL statements in a manner that is independent of
          the function names supported by the target database engine. For
          example <literal>SELECT {fn DAYOFMONTH (dateColumn)} FROM
          myTable</literal> can be used in JDBC and is translated to Standard
          SQL as <literal>SELECT EXTRACT (DAY_OF_MONTH FORM dateColumn) FROM
          myTable</literal> if a database engine supports the Standard syntax.
          If a database engine does not support Standard SQL, then the
          translation will be different. HSQLDB supports all the function
          names specified in the JDBC specifications as native functions.
          Therefore, there is no need to use the <literal>{fn FUNC_NAME ( ...
          ) }</literal> escape with HSQLDB. If a JDBC function is supported by
          the SQL Standard in a different form, the SQL Standard form is the
          preferred form to use.</para>
        </listitem>

        <listitem>
          <para>HSQLDB Built-In Functions</para>

          <para>A few additional built-in functions are available for some
          useful operations.</para>
        </listitem>
      </itemizedlist></para>

    <para>User defined functions are covered in a separate chapter.</para>

    <para>In the BNF specification used here, words in capital letters are
    actual tokens. Syntactic elements such as expressions are enclosed in
    angle brackets. The <literal>&lt;left paren&gt;</literal> and
    <literal>&lt;right paren&gt;</literal> tokens are represented with the
    actual symbol. Optional elements are enclosed with square brackets (
    <literal>&lt;left bracket&gt;</literal> and <literal>&lt;right
    bracket&gt;</literal> ). Multiple options for a required element are
    enclosed with braces (<literal> &lt;left brace&gt;</literal> and
    <literal>&lt;right brace&gt;</literal> )<literal>.</literal> Alternative
    tokens are separated with the vertical bar ( <literal>&lt;vertical
    bar&gt;</literal> ). At the end of each function definition, the standard
    which specifies the function is noted in parentheses as SQL/Foundation,
    JDBC or HSQLDB.</para>
  </section>

  <section xml:id="builtin_functions_string-sect">
    <title>String and Binary String Functions</title>

    <para>In SQL, there are three kinds of string: character, binary and bit.
    The units are respectively characters, octets, and bits. Each kind of
    string can be in different data types. CHAR, VARCHAR and CLOB are the
    character data types. BINARY, VARBINARY and BLOB are the binary data
    types. BIT and BIT VARYING are the bit string types. In all string
    functions, the position of a unit of the string within the whole string is
    specified from 1 to the length of the whole string. In the BNF,
    <literal>&lt;char value expr&gt; </literal>indicates any valid SQL
    expression that evaluates to a character type. Likewise,
    <literal>&lt;binary value expr&gt; </literal>indicates a binary type
    and<literal> &lt;num value expr&gt; </literal>indicates a numeric
    type.</para>

    <para><literal>ASCII ( &lt;char value expr&gt; )</literal></para>

    <para>Returns an INTEGER equal to the ASCII code value of the first
    character of <literal>&lt;char value expr&gt;</literal>. (JDBC)</para>

    <para><literal>CHAR ( &lt;UNICODE code&gt; ) </literal></para>

    <para>The argument is an INTEGER. Returns a character string containing a
    single character that has the specified<literal> &lt;UNICODE
    code&gt;</literal>, which is an integer. ASCII codes are a subset of the
    allowed values for <literal>&lt;UNICODE code&gt;</literal>. (JDBC)</para>

    <para><literal>CONCAT ( &lt;char value expr 1&gt;, &lt;char value expr
    2&gt; )</literal></para>

    <para><literal>CONCAT ( &lt;binary value expr 1&gt;, &lt;binary value expr
    2&gt; )</literal></para>

    <para>The arguments are character strings or binary strings. Returns a
    string formed by concatenation of the arguments. Equivalent to the SQL
    concatenation expression <literal>&lt;value expr 1&gt; || &lt;value expr
    2&gt;</literal>. (JDBC)</para>

    <para><literal>DIFFERENCE ( &lt;char value expr 1&gt;, &lt;char value expr
    2&gt; )</literal></para>

    <para>The arguments are character strings. Converts the arguments into
    SOUNDEX codes, and returns an INTEGER between 0-3 which indicates how many
    letters of the two SOUNDEX value are different. (JDBC)</para>

    <para><literal>INSERT ( &lt;char value expr 1&gt;, &lt;offset&gt;,
    &lt;length&gt;, &lt;char value expr 2&gt; )</literal></para>

    <para>Returns a character string based on <literal>&lt;char value expr
    1&gt;</literal> in which <literal>&lt;length&gt;</literal> characters have
    been removed from the <literal>&lt;offset&gt;</literal> position and in
    their place, the whole <literal>&lt;char value expr 2&gt;</literal> is
    copied. Equivalent to SQL/Foundation <literal>OVERLAY( &lt;char value
    expr1&gt; PLACING &lt; char value expr2&gt; FROM &lt;offset&gt; FOR
    &lt;length&gt; )</literal> . (JDBC)</para>

    <para><literal>HEXTORAW( &lt;char value expr&gt; )</literal></para>

    <para>Returns a BINARY string formed by translation of hexadecimal digits
    and letters in the &lt;char value expr&gt;. Each character of the &lt;char
    value expr&gt; must be a digit or a letter in the A | B | C | D | E | F
    set. Each byte of the retured binary string is formed by translating two
    hex digits into one byte. (HSQLDB)</para>

    <para><literal>LCASE ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns a character string that is the lower case version of the
    <literal>&lt;char value expr&gt;</literal>. Equivalent to SQL/Foundation
    <literal>LOWER (&lt;char value expr&gt;)</literal>. (JDBC)</para>

    <para><literal>LEFT ( &lt;char value expr&gt;, &lt;length&gt; )
    </literal></para>

    <para>Returns a character string consisting of the first
    <literal>&lt;length&gt;</literal> characters of <literal>&lt;char value
    expr&gt;</literal>. Equivalent to SQL/Foundation<literal>
    SUBSTRING(&lt;char value expr&gt; FROM 0 FOR &lt;length&gt;)</literal>.
    (JDBC)</para>

    <para><literal>LENGTH ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns as a BIGINT value the number of characters in
    <literal>&lt;char value expr&gt;</literal>. Equivalent to SQL/Foundation
    <literal>CHAR_LENGTH(&lt;char value expr&gt;)</literal>. (JDBC)</para>

    <para><literal>LOCATE ( &lt;char value expr 1&gt;, &lt;char value expr
    2&gt; [ , &lt;offset&gt; ] ) </literal></para>

    <para>Returns as a BIGINT value the starting position of the first
    occurrence of <literal>&lt;char value expr 1&gt;</literal> within
    <literal>&lt;char value expr 2&gt;</literal>. If
    <literal>&lt;offset</literal>&gt; is specified, the search begins with the
    position indicated by <literal>&lt;offset&gt;</literal>. If the search is
    not successful, 0 is returned. Equivalent to SQL/Foundation
    <literal>POSITION(&lt;char value expr 1&gt; IN &lt;char value expr
    2&gt;)</literal>. (JDBC)</para>

    <para><literal>LTRIM ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns a character string based on <literal>&lt;char value
    expr&gt;</literal> with the leading space characters removed. Equivalent
    to SQL/Foundation <literal>TRIM( LEADING ' ' FROM &lt;char value expr&gt;
    )</literal>. (JDBC)</para>

    <para><literal>RAWTOHEX( &lt;binary value expr&gt; )</literal></para>

    <para>Returns a character string composed of hexadecimal digits
    representing the bytes in the &lt;binary value expr&gt;. Each byte of the
    &lt;binary value expr&gt; is translated into two hex digits.
    (HSQLDB)</para>

    <para><literal>REPEAT ( &lt;char value expr&gt;, &lt;count&gt; )
    </literal></para>

    <para>Returns a character string based on<literal> &lt;char value
    expr&gt;</literal>, repeated <literal>&lt;count&gt;</literal> times.
    (JDBC)</para>

    <para><literal>REPLACE ( &lt;char value expr 1&gt;, &lt;char value expr
    2&gt;, &lt;char value expr 3&gt; )</literal></para>

    <para>Returns a character string based on <literal>&lt;char value expr
    1&gt;</literal> where each occurrence of <literal>&lt;char value expr
    2&gt;</literal> has been replaced with a copy of <literal>&lt;char value
    expr 3&gt;</literal>. (JDBC)</para>

    <para><literal>RIGHT ( &lt;char value expr&gt;, &lt;count&gt; )
    </literal></para>

    <para>Returns a character string consisting of the last
    <literal>&lt;count&gt;</literal> characters of <literal>&lt;char value
    expr&gt;</literal>. (JDBC)</para>

    <para><literal>RTRIM ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns a character string based on <literal>&lt;char value
    expr&gt;</literal> with the trailing space characters removed. Equivalent
    to SQL/Foundation <literal>TRIM(TRAILING ' ' FROM &lt;character
    string&gt;)</literal>. (JDBC)</para>

    <para><literal>SOUNDEX ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns a four character code representing the sound of
    <literal>&lt;char value expr&gt;</literal>. The US census algorithm is
    used. For example the soundex value for Washington is W252. (JDBC)</para>

    <para><literal>SPACE ( &lt;count&gt; ) </literal></para>

    <para>Returns a character string consisting of <literal>&lt;count&gt;
    </literal>spaces. (JDBC)</para>

    <para><literal>{ SUBSTR | SUBSTRING } ( &lt;char value expr&gt;,
    &lt;offset&gt;, &lt;length&gt; )</literal></para>

    <para>The JDBC version of SQL/Foundation <literal>SUBSTRING</literal>
    returns a character string that consists of
    <literal>&lt;length&gt;</literal> characters from <literal>&lt;char value
    expr&gt; </literal>starting at the <literal>&lt;offset&gt;</literal>
    position. (JDBC)</para>

    <para><literal>UCASE ( &lt;char value expr&gt; ) </literal></para>

    <para>Returns a character string that is the lower case version of the
    <literal>&lt;char value expr&gt;</literal>. Equivalent to SQL/Foundation
    <literal>UPPER( &lt;char value expr&gt; )</literal> . (JDBC)</para>

    <para><literal>{ CHAR_LENGTH | CHARACTER_LENGTH } ( &lt;char value
    expression&gt; [ USING { CHARACTERS | OCTETS } ] )</literal></para>

    <para><literal>OCTET_LENGTH ( &lt;string value expression&gt;
    )</literal></para>

    <para><literal>BIT_LENGTH ( &lt;string value expression&gt;
    )</literal></para>

    <para>The CHAR_LENGTH or CHARACTER_LENGTH function can be used with
    character strings, while OCTET_LENGTH can be used with character or binary
    strings and BIT_LENGTH can be used with character, binary and bit
    strings.</para>

    <para>All functions return a BIGINT value that measures the length of the
    string in the given unit. CHAR_LENGTH counts characters, OCTET_LENGTH
    counts octets and BIT_LENGTH counts bits in the string. For CHAR_LENGTH,
    if <literal>[ USING OCTETS ] </literal>is specified, the octet count is
    returned. (Foundation)</para>

    <para><literal>OVERLAY ( &lt;char value expr 1&gt; PLACING &lt;char value
    expr 2&gt;</literal></para>

    <para><literal>FROM &lt;start position&gt; [ FOR &lt;string length&gt; ] [
    USING CHARACTERS ] )</literal></para>

    <para><literal>OVERLAY ( &lt;binary value expr 1&gt; PLACING &lt;binary
    value expr 2&gt;</literal></para>

    <para><literal>FROM &lt;start position&gt; [ FOR &lt;string length&gt; ]
    )</literal></para>

    <para>The character version of OVERLAY returns a character string based on
    <literal>&lt;char value expr 1&gt;</literal> in which <literal>&lt;string
    length&gt;</literal> characters have been removed from the
    <literal>&lt;start position&gt;</literal> and in their place, the whole
    <literal>&lt;char value expr 2&gt;</literal> is copied.</para>

    <para>The binary version of OVERLAY returns a binary string formed in the
    same manner as the character version. (Foundation)</para>

    <para><literal>POSITION ( &lt;char value expr 1&gt; IN &lt;char value expr
    2&gt; [ USING CHARACTERS ] )</literal></para>

    <para><literal>POSITION ( &lt;binary value expr 1&gt; IN &lt;binary value
    expr 2&gt; )</literal></para>

    <para>The character and binary versions of POSITION search the string
    value of the second argument for the first occurrence of the first
    argument string. If the search is successful, the position in the string
    is returned as a BIGINT. Otherwise zero is returned.</para>

    <para><literal>SUBSTRING ( &lt;char value expr&gt; FROM &lt;start
    position&gt; [ FOR &lt;string length&gt; ] [ USING CHARACTERS ]
    )</literal></para>

    <para><literal>SUBSTRING ( &lt;binary value expr&gt; FROM &lt;start
    position&gt; [ FOR &lt;string length&gt; ] )</literal></para>

    <para>The character version of SUBSTRING returns a character string that
    consists of the characters of the <literal>&lt;char value expr&gt;
    </literal>from <literal>&lt;start position&gt;</literal>. If the
    optional<literal> &lt;string length&gt;</literal> is specified, only
    <literal>&lt;string length&gt; </literal>characters are returned.</para>

    <para>The binary version of SUBSTRING returns a binary string in the same
    manner. (Foundation)</para>

    <para><literal>TRIM ([ [ LEADING | TRAILING | BOTH ] [ &lt;trim
    character&gt; ] FROM ] &lt;char value expr&gt; )</literal></para>

    <para><literal>TRIM ([ [ LEADING | TRAILING | BOTH ] [ &lt;trim octet&gt;
    ] FROM ] &lt;binary value expr&gt; )</literal></para>

    <para>The character version of TRIM returns a character string based on
    <literal>&lt;char value expr&gt;</literal>. Consecutive instances of
    <literal>&lt;trim character&gt; </literal>are removed from the beginning,
    the end or both ends of the<literal>&lt;char value expr&gt;
    </literal>depending on the value of the optional first qualifier
    <literal>[ LEADING | TRAILING | BOTH ]</literal>. If no qualifier is
    specified, <literal>BOTH </literal>is used as default. If <literal>[
    &lt;trim character&gt; ]</literal> is not specified, the space character
    is used as default.</para>

    <para>The binary version of TRIM returns a binary string based on
    <literal>&lt;binary value expr&gt;</literal>. Consecutive instances of
    <literal>&lt;trim octet&gt; </literal>are removed in the same manner as in
    the character version. If<literal> [ &lt;trim octet&gt; ]</literal> is not
    specified, the 0 octet is used as default. (Foundation)</para>
  </section>

  <section xml:id="builtin_functions_numeric-sect">
    <title>Numeric Functions</title>

    <para><literal>ABS ( &lt;num value expr&gt; | &lt;interval value expr&gt;
    ) </literal></para>

    <para>Returns the absolute value of the argument as a value of the same
    type. (JDBC and Foundation)</para>

    <para><literal>ACOS ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the arc-cosine of the argument in radians as a value of
    DOUBLE type. (JDBC)</para>

    <para><literal>ASIN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the arc-sine of the argument in radians as a value of DOUBLE
    type. (JDBC)</para>

    <para><literal>ATAN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the arc-tangent of the argument in radians as a value of
    DOUBLE type. (JDBC)</para>

    <para><literal>ATAN2 ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt;
    ) </literal></para>

    <para>The <literal>&lt;num value expr 1&gt;</literal> and <literal>&lt;num
    value expr 2&gt;</literal> express the <varname>x</varname> and
    <varname>y</varname> coordinates of a point. Returns the angle, in
    radians, representing the angle coordinate of the point in polar
    coordinates, as a value of DOUBLE type. (JDBC)</para>

    <para><literal>{ CEIL | CEILING } ( &lt;num value expr&gt; )
    </literal></para>

    <para>Returns the smallest integer greater than or equal to the argument.
    If the argument is exact numeric then the result is exact numeric with a
    scale of 0. If the argument is approximate numeric, then the result is of
    DOUBLE type. (JDBC and Foundation)</para>

    <para><literal>BITOR ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt;
    )</literal></para>

    <para><literal>BITAND ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt;
    )</literal></para>

    <para><literal>BITXOR ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt;
    )</literal></para>

    <para>These three functions perform the bit operations: OR, AND, XOR, on
    two integer values. The result is an integer value. (HSQLDB)</para>

    <para><literal>COS ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the cosine of the argument (an angle expressed in radians)
    as a value of DOUBLE type. (JDBC)</para>

    <para><literal>COT ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the cotangent of the argument as a value of DOUBLE type. The
    <literal>&lt;num value expr&gt;</literal> represents an angle expressed in
    radians. (JDBC)</para>

    <para><literal>DEGREES ( &lt;num value expr&gt; ) </literal></para>

    <para>Converts the argument (an angle expressed in<literal>
    radians</literal>) into degrees and returns the value in the DOUBLE type.
    (JDBC)</para>

    <para><literal>EXP ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the exponential value of the argument as a value of DOUBLE
    type. (JDBC and Foundation)</para>

    <para><literal>FLOOR ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the largest integer that is less than or equal to the
    argument. If the argument is exact numeric then the result is exact
    numeric with a scale of 0. If the argument is approximate numeric, then
    the result is of DOUBLE type. (JDBC and Foundation)</para>

    <para><literal>LN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the natural logarithm of the argument, as a value of DOUBLE
    type. (Foundation)</para>

    <para><literal>LOG ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the natural logarithm of the argument, as a value of DOUBLE
    type. (JDBC)</para>

    <para><literal>LOG10 ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the base 10 logarithm of the argument as a value of DOUBLE
    type. (JDBC)</para>

    <para><literal>MOD ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt; )
    </literal></para>

    <para>Returns the remainder (modulus) of <literal>&lt;num value expr
    1&gt;</literal> divided by <literal>&lt;num value expr 2&gt;.</literal>
    The data type of the returned value is the same as the second argument.
    (JDBC and Foundation)</para>

    <para><literal>PI () </literal></para>

    <para>Returns the constant pi as a value of DOUBLE type. (JDBC)</para>

    <para><literal>POWER ( &lt;num value expr 1&gt;, &lt;num value expr 2&gt;
    ) </literal></para>

    <para>Returns the value of <literal>&lt;num value expr 1&gt;</literal>
    raised to the power of <literal>&lt;int value expr 2&gt;</literal> as a
    value of DOUBLE type. (JDBC and Foundation)</para>

    <para><literal>RADIANS ( &lt;num value expr&gt; ) </literal></para>

    <para>Converts the argument (an angle expressed in<literal>
    degrees</literal>) into radians and returns the value in the DOUBLE type.
    (JDBC)</para>

    <para><literal>RAND ( [ &lt;int value expr&gt; ] ) </literal></para>

    <para>Returns a random value in the DOUBLE type. The optional <literal>[
    &lt;int value expr&gt; ]</literal> is used as seed value. In HSQLDB each
    session has a separate random number generator. (JDBC)</para>

    <para><literal>ROUND ( &lt;num value expr&gt;, &lt;int value expr&gt; )
    </literal></para>

    <para>The <literal>&lt;num value expr&gt; </literal>is of the DOUBLE type.
    The function returns a DOUBLE value which is the value of the argument
    rounded to <literal>&lt;int value expr&gt;</literal> places right of the
    decimal point. If <literal>&lt;int value expr&gt;</literal> is negative,
    the first argument is rounded to <literal>&lt;int value expr&gt;</literal>
    places to the left of the decimal point. (JDBC)</para>

    <para><literal>SIGN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns an INTEGER, indicating the sign of the argument. If the
    argument is negative then -1 is returned. If it is equal to zero then 0 is
    returned. If the argument is positive then 1 is returned. (JDBC)</para>

    <para><literal>SIN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the sine of the argument (an angle expressed in radians) as
    a value of DOUBLE type. (JDBC)</para>

    <para><literal>SQRT ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the square root of the argument as a value of DOUBLE type.
    (JDBC and Foundation)</para>

    <para><literal>TAN ( &lt;num value expr&gt; ) </literal></para>

    <para>Returns the tangent of the argument (an angle expressed in radians)
    as a value of DOUBLE type. (JDBC)</para>

    <para><literal>TRUNCATE ( &lt;num value expr&gt;, &lt;int value expr&gt; )
    </literal></para>

    <para>Returns a value in the same type as <literal>&lt;num value
    expr&gt;</literal>. The value is rounded by replacing digits with zeros
    from <literal>&lt;int value expr&gt;</literal> places right of the decimal
    point to the end. If <literal>&lt;int value expr&gt;</literal> is
    negative, <literal>ABS( &lt;int value expr&gt; )</literal> digits to left
    of the decimal point and all digits to the right of the decimal points are
    replaced with zeros. Results of calling TRUNCATE with 12345.6789 with (-2,
    0, 2, 4) are (12300.0000, 12345.0000, 12345.6700, 12345.6789).
    (JDBC)</para>
  </section>

  <section xml:id="builtin_functions_datetime-sect">
    <title>Date Time and Interval Functions</title>

    <para><literal>EXTRACT ( &lt;extract field&gt; FROM &lt;extract source&gt;
    )</literal></para>

    <para><literal>&lt;extract field&gt; ::= YEAR | MONTH | DAY | HOUR |
    MINUTE | DAY_OF_WEEK | WEEK_OF_YEAR | QUARTER | DAY_OF_YEAR | DAY_OF_MONTH
    |</literal></para>

    <para><literal>TIMEZONE_HOUR | TIMEZONE_MINUTE | SECOND | SECONDS_MIDNIGHT
    |</literal></para>

    <para><literal>DAY_NAME | MONTH_NAME</literal></para>

    <para><literal>&lt;extract source&gt; ::= &lt;datatime value expr&gt; |
    &lt;interval value expr&gt;</literal></para>

    <para>The EXTRACT function returns a field or element of the
    <literal>&lt;extract source&gt;</literal>. The <literal>&lt;extract
    source&gt;</literal> is a datetime or interval expression. The type of the
    return value is BIGINT for most of the<literal> &lt;extract
    field&gt;</literal> options, except for <literal>SECOND </literal>where a
    DECIMAL value is returned and <literal>DAY_NAME </literal>or<literal>
    MONTH_NAME </literal>where a character string is returned. When
    <literal>MONTH_NAME</literal> is specified, a string in the range January
    - December is returned. When <literal>DAY_NAME </literal>is specified, a
    string in the range Sunday -Saturday is returned.</para>

    <para>If the <literal>&lt;extract source&gt;</literal> is <literal>FROM
    &lt;datatime value expr&gt;</literal>, different groups of
    <literal>&lt;extract source&gt;</literal> can be used depending on the
    data type of the expression. The <literal>TIMEZONE_HOUR |
    TIMEZONE_MINUTE</literal> options are valid only for TIME WITH TIMEZONE
    and TIMESTAMP WITH TIMEZONE data types. The <literal>HOUR | MINUTE |
    SECOND | SECONDS_MIDNIGHT</literal> options, are valid for TIME and
    TIMESTAMP types. The rest of the fields are valid for DATE and TIMESTAMP
    types.</para>

    <para>If the <literal>&lt;extract source&gt;</literal> is <literal>FROM
    &lt;interval value expr&gt;</literal>, the <literal>&lt;extract
    field&gt;</literal> must be one of the fields of the INTERVAL type of the
    expressions. The <literal>YEAR | MONTH</literal> options may be valid for
    INTERVAL types based on months. The<literal>DAY | HOUR | MINUTE | SECOND |
    SECONDS_MIDNIGHT</literal> options may be valid for INTERVAL types based
    on seconds. For example,<literal> DAY | HOUR | MINUTE</literal> are the
    only valid fields for the INTERVAL DAY TO MINUTE data type. (Foundation
    with HSQLDB extensions)</para>

    <para><literal>CURRENT_DATE</literal></para>

    <para><literal>CURRENT_TIME [ ( &lt;time precision&gt; )
    ]</literal></para>

    <para><literal>LOCALTIME [ ( &lt;time precision&gt; ) ]</literal></para>

    <para><literal>CURRENT_TIMESTAMP [ ( &lt;timestamp precision&gt; )
    ]</literal></para>

    <para><literal>LOCALTIMESTAMP [ ( &lt;timestamp precision&gt; )
    ]</literal></para>

    <para>These datetime functions return the datetime value representing the
    moment the function is called. CURRENT_DATE returns a value of DATE type.
    CURRENT_TIME returns a value of TIME WITH TIME ZONE type. LOCALTIME
    returns a value of TIME type. CURRENT_TIMESTAMP returns a value of
    TIMESTAMP WITH TIME ZONE type. LOCALTIMESTAMP returns a value of TIMESTAMP
    type. If the optional <literal>[ ( &lt;time precision&gt; ) ]</literal>
    or<literal> [ ( &lt;timestamp precision&gt; ) ]</literal> is used, then
    the returned value has the specified fraction of the second precision.
    (Foundation)</para>

    <para><literal>CURDATE ()</literal></para>

    <para>This function is equivalent to<literal> CURRENT_DATE.
    </literal>(JDBC)</para>

    <para><literal>CURTIME ()</literal></para>

    <para>This function is equivalent to<literal> LOCALTIME</literal>.
    (JDBC)</para>

    <para><literal>DAYNAME ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to<literal> EXTRACT ( DAY_NAME FROM ...
    ) </literal>Returns a string in the range of Sunday - Saturday.
    (JDBC)</para>

    <para><literal>DAYOFMONTH ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to<literal> EXTRACT ( DAY_OF_MONTH FROM
    ... ) </literal>Returns an integer value in the range of 1-31.
    (JDBC)</para>

    <para><literal>DAYOFWEEK ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( DAY_OF_WEEK FROM
    ... ) </literal>Returns an integer value in the range of 1-7. The first
    day of the week is Sunday. (JDBC)</para>

    <para><literal>DAYOFYEAR ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( DAY_OF_YEAR FROM
    ... ) </literal>Returns an integer value in the range of 1-366.
    (JDBC)</para>

    <para><literal>HOUR ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( HOUR FROM ... )
    </literal>Returns an integer value in the range of 0-23. (JDBC)</para>

    <para><literal>MINUTE ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to<literal> EXTRACT ( MINUTE FROM ... )
    </literal>Returns an integer value in the range of 0 - 59. (JDBC)</para>

    <para><literal>MONTH ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( MONTH FROM ... )
    </literal>Returns an integer value in the range of 1-12. (JDBC)</para>

    <para><literal>MONTHNAME ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( NAME_OF_MONTH FROM
    ... ) </literal>Returns a string in the range of January - December.
    (JDBC)</para>

    <para><literal>NOW ()</literal></para>

    <para>This function is equivalent to
    <literal>LOCAL_TIMESTAMP.</literal></para>

    <para><literal>QUARTER ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( QUARTER FROM ... )
    </literal>Returns an integer in the range of 1 - 4. (JDBC)</para>

    <para><literal>SECOND ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equivalent to <literal>EXTRACT ( SECOND FROM ... )
    </literal>Returns an integer in the range of 0 - 59. (JDBC)</para>

    <para><literal>SECONDS_SINCE_MIDNIGHT ( &lt;datatime value expr&gt;
    )</literal></para>

    <para>This function is equvalent to<literal> EXTRACT (
    SECONDS_SINCE_MIDNIGHT FROM ... ) </literal>Returns an integer in the
    range of 0 - 86399. (HSQLDB)</para>

    <para><literal>WEEK ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equvalent to<literal> EXTRACT ( WEEK_OF_YEAR FROM
    ... ) </literal>Returns an integer in the range of 1 - 54. (JDBC)</para>

    <para><literal>YEAR ( &lt;datatime value expr&gt; )</literal></para>

    <para>This function is equvalent to<literal> EXTRACT ( YEAR FROM ... )
    </literal>Returns an integer in the range of 1 - 9999. (JDBC)</para>

    <para><literal>TIMESTAMPADD ( &lt;datetime value expr&gt;, &lt;numeric
    value expression&gt;, &lt;tsi datetime field&gt; )</literal></para>

    <para><literal>TIMESTAMPDIFF ( &lt;datetime value expr 1&gt;, datetime
    value expr 2&gt;, &lt;tsi datetime field&gt; )</literal></para>

    <para><literal>&lt;tsi datetime field&gt; ::= SQL_TSI_FRAC_SECOND |
    SQL_TSI_SECOND | SQL_TSI_MINUTE | SQL_TSI_HOUR | SQL_TSI_DAY |
    SQL_TSI_WEEK | SQL_TSI_MONTH | SQL_TSI_QUARTER |
    SQL_TSI_YEAR</literal></para>

    <para>HSQLDB supports full SQL Standard dateteime features. It supports
    adding integers representing units of time directly to datetime values
    using the arithmetic plus operator. It also supports subtracting one
    <literal>&lt;datetime value expr&gt;</literal> from another in the given
    units of days using the minus operator. An example of
    <literal>&lt;datetime value expr&gt; + &lt;numeric value expression&gt;
    &lt;datetime field&gt; </literal>is <literal>LOCAL_TIMESTAMP + 5
    DAY</literal>. An example of <literal>( &lt;datetime value expr&gt; -
    &lt;numeric value expression&gt; ) &lt;datetime field&gt; </literal>is
    <literal>(CURRENT_DATE - DATE '2008-08-8') MONTH </literal>which returns
    the number of calendar months between the two dates.</para>

    <para>The two JDBC functions, <literal>TIMESTAMPADD </literal>and
    <literal>TIMESTAMPDIFF</literal> perform the same function as above SQL
    expressions. The field names are different from those used in the EXTRACT
    functions. These names are valid for use only when calling these two
    functions. The return value for TIMESTAMPADD is of the same type as the
    datetime argument used. The return type for TIMESTAMPDIFF is always
    BIGINT, regardless of the type of arguments. The two datetime arguments of
    TIMESTAMPDIFF should be of the same type. (JDBC)</para>

    <para><literal>DATEDIFF ( &lt;datetime value expr 1&gt;, datetime value
    expr 2&gt;, &lt;field&gt; )</literal></para>

    <para><literal>&lt;field&gt; ::= 'yy' | 'mm' | 'dd' | 'hh' | 'mi' | 'ss' |
    'ms'</literal></para>

    <para>The DATEDIFF function is an alternative to TIMESTAMPDIFF, with fewer
    available field options. The fields translate to YEAR, MONTH, DAY, HOUR,
    MINUTE, SECOND and MILLISECOND. (HSQLDB}</para>

    <para><literal>TO_CHAR( &lt;datetime value expr&gt;, &lt;char value
    expr&gt; )</literal></para>

    <para>This function formats a datetime or numeric value to the format
    specified by the pattern given in the second argument. The pattern can
    contain pattern elements from the list given below, plus punctuation and
    space characters. An example, including the result, is given below:</para>

    <programlisting>TO_CHAR ( TIMESTAMP'2008-02-01 20:30:40', 'YYYY BC MONTH, DAY HH')

2008 AD February, Friday 8
</programlisting>

    <para>The format is internally translated to a
    <classname>java.text.SimpleDateFormat</classname> format string. Any
    character sequences not listed below are included in the Java format
    string and may cause unexpected results or errors. The supported format
    components are as follows:</para>

    <table colsep="1" frame="all" pgwide="0">
      <title>TO CHAR Values</title>

      <tgroup cols="2">
        <colspec colwidth="5cm" />

        <colspec />

        <tbody>
          <row>
            <entry><literal>BC | B.C. | AD | A.D.</literal></entry>

            <entry>Returns <literal>AD</literal> for common era and
            <literal>BC</literal> for before common era</entry>
          </row>

          <row>
            <entry><literal>RRRR</literal></entry>

            <entry><para>4-digit year</para></entry>
          </row>

          <row>
            <entry><literal>YYYY</literal></entry>

            <entry><para>4-digit year</para></entry>
          </row>

          <row>
            <entry><literal>IYYY</literal></entry>

            <entry><para>4-digit year</para></entry>
          </row>

          <row>
            <entry><literal>YY</literal></entry>

            <entry><para>2 digit year</para></entry>
          </row>

          <row>
            <entry><literal>IY</literal></entry>

            <entry><para>2 digit year</para></entry>
          </row>

          <row>
            <entry><literal>IYYY</literal></entry>

            <entry><para>4-digit year</para></entry>
          </row>

          <row>
            <entry><literal>MM</literal></entry>

            <entry><para>Month (01-12)</para></entry>
          </row>

          <row>
            <entry><literal>MON</literal></entry>

            <entry><para>Short three-letter name of month</para></entry>
          </row>

          <row>
            <entry><literal>MONTH</literal></entry>

            <entry><para>Name of month</para></entry>
          </row>

          <row>
            <entry><literal>WW</literal></entry>

            <entry><para>Week of year (1-53) where week 1 starts on the first
            day of the year and continues to the seventh day of the
            year.</para></entry>
          </row>

          <row>
            <entry><literal>W</literal></entry>

            <entry><para>Week of month (1-5) where week 1 starts on the first
            day of the month and ends on the seventh.</para></entry>
          </row>

          <row>
            <entry><literal>IW</literal></entry>

            <entry><para>Week of year (1-52 or 1-53) based on the ISO
            standard.</para></entry>
          </row>

          <row>
            <entry><literal>DAY</literal></entry>

            <entry><para>Name of day.</para></entry>
          </row>

          <row>
            <entry><literal>DD</literal></entry>

            <entry><para>Day of month (1-31).</para></entry>
          </row>

          <row>
            <entry><literal>DDD</literal></entry>

            <entry><para>Day of year (1-366).</para></entry>
          </row>

          <row>
            <entry><literal>DY</literal></entry>

            <entry><para>Short three-letter name of day.</para></entry>
          </row>

          <row>
            <entry><literal>HH</literal></entry>

            <entry><para>Hour of day (0-11).</para></entry>
          </row>

          <row>
            <entry><literal>HH12</literal></entry>

            <entry><para>Hour of day (0-11).</para></entry>
          </row>

          <row>
            <entry><literal>HH24</literal></entry>

            <entry><para>Hour of day (0-23).</para></entry>
          </row>

          <row>
            <entry><literal>MI</literal></entry>

            <entry><para>Minute (0-59).</para></entry>
          </row>

          <row>
            <entry><literal>SS</literal></entry>

            <entry><para>Second (0-59).</para></entry>
          </row>

          <row>
            <entry><literal>FF</literal></entry>

            <entry><para>Fractional seconds.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="builtin_functions_sysfunc-sect">
    <title>System Functions</title>

    <para><literal>DATABASE ()</literal></para>

    <para>Returns the file name (without directory information) of the
    database. (JDBC)</para>

    <para><literal>IDENTITY()</literal></para>

    <para>Returns the last IDENTITY value inserted into a row by the current
    session. (HSQLDB)</para>

    <para><literal>IFNULL( &lt;value expr 1&gt;, &lt;value expr 2&gt;
    )</literal></para>

    <para>Returns <literal>&lt;value expr 1&gt;</literal> if it is not null,
    otherwise returns <literal>&lt;value expr 2&gt;</literal>. The type of
    both arguments must be the same. Equivalent to SQL Standard
    <literal>COALESCE(&lt;value expr 1&gt;, &lt;value expr 2&gt;)</literal>
    function. (JDBC)</para>

    <para><literal>USER ()</literal></para>

    <para>Equivalent to the SQL function <literal>CURRENT_USER</literal>.
    (JDBC)</para>

    <para><literal>CONVERT ( &lt;value expr&gt; , &lt;data type&gt;
    )</literal></para>

    <para><literal>&lt;data type&gt; ::= { SQL_BIGINT | SQL_BINARY | SQL_BIT
    |SQL_BLOB | SQL_BOOLEAN | SQL_CHAR | SQL_CLOB | SQL_DATE | SQL_DECIMAL |
    SQL_DATALINK |SQL_DOUBLE | SQL_FLOAT | SQL_INTEGER | SQL_LONGVARBINARY |
    SQL_LONGNVARCHAR | SQL_LONGVARCHAR | SQL_NCHAR | SQL_NCLOB | SQL_NUMERIC |
    SQL_NVARCHAR | SQL_REAL | SQL_ROWID | SQL_SQLXML | SQL_SMALLINT | SQL_TIME
    | SQL_TIMESTAMP | SQL_TINYINT | SQL_VARBINARY | SQL_VARCHAR} [ (
    &lt;precision, length or scale parameters&gt; ) ]</literal></para>

    <para>The CONVERT function is a JDBC escape function, equivalent to the
    SQL standard CAST expression. It converts the <literal>&lt;value
    expr&gt;</literal> into the given <literal>&lt;data type&gt;</literal> and
    returns the value. The <literal>&lt;data type&gt;</literal> options are
    synthetic names made by prefixing type names with <literal>SQL_</literal>.
    Some of the <literal>&lt;data type&gt;</literal> options represent valid
    SQL types, but some are are based on non-standard type names, namely
    <literal>{ SQL_LONGNVARCHAR | SQL_LONGVARBINARY |SQL_LONGNVARCHAR |
    SQL_TINYINT }</literal>. None of the synthetic names can be used in any
    other context than the CONVERT function.</para>

    <para>The definition of CONVERT in the JDBC Standard does not allow the
    precision, scale or length to be specified. This is required by the SQL
    standard for BINARY, BIT, BLOB, CHAR, CLOB, VARBINARY and VARCHAR types
    and is often needed for DECIMAL and NUMERIC. Therefore, HSQLDB allows the
    use of precision, scale or length for the type definition when they are
    valid for the type definition. HSQLDB also allows the use of real type
    names (without the <literal>SQL_</literal> prefix). (JDBC)</para>

    <para><literal>CURRENT_USER</literal></para>

    <para><literal>CURRENT_ROLE</literal></para>

    <para><literal>SESSION_USER</literal></para>

    <para><literal>SYSTEM_USER</literal></para>

    <para><literal>CURRENT_SCHEMA</literal></para>

    <para><literal>CURRENT_CATALOG</literal></para>

    <para>These functions return the named current session attribute. They are
    all SQL Standard functions.</para>

    <para>The CURRENT_USER is the user that connected to the database, or a
    user subsequently set by the SET AUTHORIZATION statement.</para>

    <para>SESSION_USER is the same as CURRENT_USER</para>

    <para>SYSTEM_USER is the user that connected to the database. It is not
    changed with any command until the session is closed.</para>

    <para>CURRENT_SCHEMA is default schema of the user, or a schema
    subsequently set by the SET SCHEMA command.</para>

    <para>CURRENT_CATALOG is always the same within a given HSQLDB database
    and indicates the name of the catalog.</para>
  </section>
</chapter>
