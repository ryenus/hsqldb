<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<appendix version="5.0" xml:id="building-app"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:ns5="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1998/Math/MathML"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <!-- We declare the default namespace + those for prefixes xlink: and xi: in
       the root element, so we can use them anywhere in this file. -->

  <info>
    <title xml:id="building-title">Building HyperSQL Jars</title>

    <subtitle>How to build customized or specialized jar files</subtitle>

    <author>
      <personname><firstname>Fred</firstname>
      <surname>Toussi</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>&timestamp;</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>Building</keyword>

      <keyword>Ant</keyword>

      <keyword>Gradle</keyword>
    </keywordset>
  </info>

  <section>
    <title>Purpose</title>

    <simpara>From 2.0, the supplied <filename>hsqldb.jar</filename> file is
    built with Java 1.6. If you want to run with a 1.5 or older JVM, or if you
    want to use an alternative jar (<filename>hsqldb-min.jar</filename>, etc.)
    you must build the desired jar with a Java SDK.</simpara>
  </section>

  <section xml:id="gradle-invoke--sect">
    <title>Building with Gradle</title>

    <indexterm significance="preferred">
      <primary>Gradle</primary>
    </indexterm>

    <section><title>Invoking a Graphical Gradle Build</title>
      <simpara>
        As noted above, Java SDK 5 or later is required.
        Whether from an IDE, a shortcut or launch icon, or the command line,
        you need to run either <literal>gradlew.bat</literal> (on Windows)
        or <literal>gradlew</literal> (all other platforms) from the
        <filename>build</filename> directory in which it resides in the
        HyperSQL distribution.
      </simpara>
      <important><title>Rare Gotcha</title><simpara>
        Depending on your operating system, version, and how you installed
        your JDK, Gradle may not be able to find the JDK.
        If Gradle fails to run successfully, this is probably the problem.
        The easiest way to fix this problem is to set environmental variable
        <varname>JAVA_HOME</varname> to the root directory where your Java
        SDK is installed.
        So as not to get bogged down in the details here, if you don't know how
        set an environmental variable, I ask you to utilize a search engine.
      </simpara></important>
      <variablelist> <title>Invoking the Gradle Build Gui</title>
        <varlistentry><term>... From Command-line</term><listitem>
          <procedure> <title>Invoking Gradle GUI From command-line</title>
            <step><simpara>
              Get a command-line shell.
              Windows users can use either
              <guimenuitem>Start/Run...</guimenuitem> or
              <guimenuitem>Start/Start Search</guimenuitem>, and enter
              "<literal>cmd</literal>".
              Non-windows users will know how to get a shell.
            </simpara></step> <step><simpara>
              In the shell,
              cd to the <filename>build</filename> directory under the root
              directory where you extracted or installed HyperSQL to.
              (Windows users can use the Windows Search function or
              Windows Explorer to look for it).
            </simpara></step> <step><simpara>
              In the shell,
              run either <literal>gradlew.bat --gui</literal> (on Windows)
              or <literal>gradlew --gui</literal> (all other platforms).
            </simpara></step>
          </procedure>
          <simpara>
            You will notice that Gradle runs synchronously, blocking your
            command line.
            If you have a good operating system, you can use your shell's
            features to invoke Gradle in the background.
            Otherwise, if you need a shell while running the gui,
            open up another console window.
          </simpara>
        </listitem></varlistentry>
        <varlistentry><term>... From Shortcut or Launcher</term><listitem>
          <simpara>I can only explain how to make a Windows desktop shortcut,
            because the procedure to make quick launch icons with newer Windows
            variants is very Windows-version-specific and very tricky.
            Therefore, Windows users wanting a quick launch icon, and
            non-Windows users will have to adapt these procedures to their
            needs.
          </simpara>
          <procedure><title>Making a Gradle Gui Desktop Shortcut on Windows</title>
            <step><simpara>
              Start up Windows explorer.
              Depending on your Windows version, it will be in the Start Menu,
              or in the menu you get when you right-click
              <guimenuitem>Start</guimenuitem>.
            </simpara></step> <step><simpara>
              Navigate Windows Explorer to the <filename>build</filename>
              directory within your HyperSQL installation.
            </simpara></step> <step><simpara>
              Control + Click &amp; drag the file "<filename>gradlew.bat</filename>"
              (or if you don't see that, then the "<filename>gradlew</filename>"
              entry with an indication that it is a
              <emphasis>batch file</emphasis>) to your desktop.
            </simpara></step> <step><simpara>
              Right-click on the newly created icon and select
              <guimenuitem>Properties</guimenuitem>.
            </simpara></step> <step><simpara>
              Edit the <guilabel>Target</guilabel> or
              <guilabel>Command</guilabel> to enter "<literal> --gui</literal>"
              (without the quotes) after the existing command.
            </simpara></step> <step><simpara>
              If you are so inclined, select a better icon for the shortcut.
            </simpara></step>
          </procedure>
        </listitem></varlistentry>
        <varlistentry><term>... From IDE</term><listitem>
          <simpara>Some IDEs, like IntelliJ have direct support for Gradle.
            The Spring Framework team is working on a sophisticated plugin for
            using Gradle with their IDE.
            But I'm going to document a very basic setup done with Eclipse
            because it's very servicable and a very similar procedure is likely
            to work with all other IDEs.
          </simpara>
          <procedure><title>Setting up Gradle Graphical Builds from Eclipse</title>
            <step><simpara>
              From Eclipse, use pulldown menu
              <guimenuitem>Run</guimenuitem> /
              <guimenuitem>External Tools</guimenuitem> /
              <guimenuitem>External Tools Configurations...</guimenuitem>.
            </simpara></step> <step><simpara>
              Select <guilabel>Program</guilabel> in the left navigator panel
              then click the <guilabel>New launch configuration</guilabel>
              button in the tool bar (first button in my toolbar).
            </simpara></step> <step><simpara>
              To the right, enter into the <guilabel>Name:</guilabel> field
              <literal>Gradle</literal> (or whatever name you want for the
              launcher).
            </simpara></step> <step><simpara>
              Make sure that the <guilabel>Main</guilabel> tab is selected.
              We'll fill in fields to the right side now...
            </simpara></step> <step><simpara>
              For the <guimenuitem>Location:</guimenuitem> field, use the
              <guimenuitem>Browse Workspace...</guimenuitem> button to
              navigate to and select the <filename>gradlew.bat</filename>
              (Windows) or <filename>gradlew</filename> (other) file in the
              <filename>build</filename> directory of your HyperSQL project.
            </simpara></step> <step><simpara>
              For the <guimenuitem>Working Directory</guimenuitem> field,
              use the <guimenuitem>Browse Workspace</guimenuitem> button to
              navigate to and select the <filename>build</filename> directory
              containing the file that you selected for the previous item.
            </simpara></step> <step><simpara>
              For the <guimenuitem>Arguments:</guimenuitem> field, enter
              <literal>--gui</literal>.
            </simpara></step>
          </procedure>
          <simpara>
            After doing that, you can use
            <guimenuitem>Run</guimenuitem> /
            <guimenuitem>External Tools</guimenuitem> or the equivalent tool
            bar button button to launch the Gradle Gui.
            You can do this and close it after each use, or, to avoid startup
            lag, minimize it when it's not in use.
          </simpara>
        </listitem></varlistentry>
      </variablelist>
    </section>

    <section><title>Using Gradle</title>
      <section><title>Using Gradle from the command-line</title>
        <simpara>
          If you ran just <literal>gradle</literal> or
          <literal>gradle.bat</literal>, then you will be presented with
          simple instructions for how to do everything that you want to do.
          Basically, you will run the same <literal>gradle</literal> or
          <literal>gradle.bat</literal> command repeatedly, with different
          switches and arguments.
        </simpara>
      </section>
      <section><title>Using Gradle from the Gui</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="gradle-gui.png" align="center" format="PNG"/>
           <!-- Instead of specifying width="6.5in" here, I've scaled the
                image file itself.  This causes HTML representation to
                display the image without distortion and reduction with its
                native size, and is manually sized correctly for PDF/PS. -->
          </imageobject>
          <caption>
            <simpara>Sample Gradle Gui Screen</simpara>
          </caption>
        </mediaobject>
        <procedure> <title>First Time using Gradle Gui</title>
          <step><simpara>
            The first time that you run the Gradle gui, it takes a while to
            initialize.
            After the Gui is populated with targets, the first thing you should
            do is click the <guilabel>Filter Edit</guilabel> toolbar button to
            the far right, check the <guilabel>Hide Tasks with...</guilabel>
            checkbox, and hit <guilabel>OK</guilabel> to apply the change.
          </simpara></step> <step><simpara>
            Now, back in the main window, in the top panel, with the
            <guilabel>Task Tree</guilabel> tab selected, you have the
            list of public tasks, sorted aphabetically.
            Down bottom is displayed the output of the last task(s) execution.
          </simpara></step> <step><simpara>
            Scroll to the <literal>help</literal> task and click it once to
            select it,
            then click the green <guilabel>Execute</guilabel> toolbar button
            above.
            (You could also have double-clicked the item, but you can use the
            selection procedure to pick multiple tasks with Control or Shift
            keys to run execute multiple tasks in a single run.
          </simpara></step> <step><simpara>
            Scroll through and read the output of the <literal>help</literal>
            task in the bottom panel.
            Where this help screen speaks about verbosity switches, you can
            accomplish the same thing by using the
            <guimenuitem>Setup</guimenuitem> tab.
            Whenever Gradle output (in the bottom panel) talks about running
            <literal>gradlew &lt;sometask&gt;...</literal>, you can execute
            ths specified task(s) by selecting and executing them like we just
            did.
          </simpara></step>
        </procedure>
        <simpara>
          The Gradle gui doesn't have a convenient way to set build properties
          yet.
          If you want to change Ant or Gradle build settings, edit the text
          file <filename>build.properties</filename> in the same
          <filename>build</filename> directory (creating it if it doesn't exist
          yet), and enter your propeties using Java properties file syntax.
        </simpara>
      </section>
    </section>
  </section>

  <section xml:id="building-ant-sect">
    <title>Building with Apache Ant</title>

    <titleabbrev>Building with Ant</titleabbrev>

    <indexterm significance="preferred">
      <primary>Ant</primary>
    </indexterm>

    <simpara>You should use version 1.7.x of Ant (Another Neat Tool) to do
    Ant builds with HyperSQL.</simpara>

    <section>
      <title>Obtaining Ant</title>

      <simpara>Ant is a part of the Jakarta/Apache Project.</simpara>

      <itemizedlist>
        <listitem>
          <simpara><link xlink:href="http://ant.apache.org">Home of the Apache
          Ant project</link></simpara>
        </listitem>

        <listitem>
          <simpara>The <link
          xlink:href="http://ant.apache.org/manual/install.html#installing">
          Installing Ant</link> page of the <link
          xlink:href="http://ant.apache.org/manual">Ant Manual</link>. Follow
          the directions for your platform.</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Building Hsqldb with Ant</title>

      <simpara>Once you have unpacked the zip package for hsqldb, under the
      <filename>/hsqldb</filename> folder, in <filename>/build</filename>
      there is a <filename>build.xml</filename> file that builds the
      <filename>hsqldb.jar</filename> with Ant (Ant must be already
      installed). To use it, change to <filename>/build</filename> then
      type:</simpara>

      <informalexample>
        <screen> ant -projecthelp</screen>
      </informalexample>

      <simpara>This displays the available ant targets, which you can supply
      as command line arguments to ant. These include</simpara>

      <variablelist>
        <varlistentry>
          <term>hsqldb</term>

          <listitem>
            <simpara>to build the <filename>hsqldb.jar</filename>
            file</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>explainjars</term>

          <listitem>
            <simpara>Lists all targets which build jar files, with an
            explanation of the purposes of the different jars.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean</term>

          <listitem>
            <simpara>to clean up the /classes directory that is
            created</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean-all</term>

          <listitem>
            <simpara>to remove the old jar and doc files as well</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>javadoc</term>

          <listitem>
            <simpara>to build javadoc</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmain</term>

          <listitem>
            <simpara>to build a smaller jar for HSQLDB that does not contain
            utilities</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqljdbc</term>

          <listitem>
            <simpara>to build an extremely small jar containing only the
            client-side JDBC driver (can connect only to a HyperSQL
            Server).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmin</term>

          <listitem>
            <simpara>to build a small jar that supports
            <emphasis>in-process</emphasis> catalogs, but neither running nor
            connecting to HyperSQL Servers.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sqltool</term>

          <listitem>
            <simpara>to build sqltool.jar, which contains only the SqlTool
            classes.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>...</term>

          <listitem>
            <simpara>Many more targets are available. Run <literal>ant
            -p</literal> and <literal>ant explainjars</literal>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist>

      <simpara>HSQLDB can be built in any combination of two JRE (Java Runtime
      Environment) versions and many jar file sizes.</simpara>

      <simpara>A jar built with an older JRE is compatible for use with a
      newer JRE (you can compile with Java 1.5 and run with 1.6). But the
      newer JDBC capabilities of the JRE will be not be available.</simpara>

      <simpara>The client jar (<filename>hsqljdbc.jar</filename>) contains
      only the HSQLDB JDBC Driver client. The smallest engine jar
      (<filename>hsqldbmin.jar</filename>) contains the engine and the HSQLDB
      JDBC Driver client. The default size (<filename>hsqldb.jar</filename>)
      also contains server mode support and the utilities. The largest size
      (<filename>hsqldbtest.jar</filename>)includes some test classes as well.
      Before building the <filename>hsqldbtest.jar</filename> package, you
      should download the junit jar from <link
      xlink:href="http://www.junit.org"></link> and put it in the
      <filename>/lib</filename> directory, alongside
      <filename>servlet.jar</filename>, which is included in the .zip
      package.</simpara>

      <para>If you want your code built for high performance, as opposed to
      debugging (in the same way that we make our production distributions),
      make a file named <filename>build.properties</filename> in your build
      directory with the contents <informalexample>
          <screen>build.debug: false</screen>
        </informalexample>The resulting Java binaries will be faster and
      smaller, at the cost of exception stack traces not identifying source
      code locations (which can be extremely useful for debugging).</para>

      <simpara>After installing Ant on your system use the following command
      from the <filename>/build</filename> directory. Just run <literal>ant
      explainjars</literal> for a concise list of all available jar
      files.</simpara>

      <informalexample>
        <screen>ant explainjars</screen>
      </informalexample>

      <simpara>The command displays a list of different options for building
      different sizes of the HSQLDB Jar. The default is built using:</simpara>

      <example>
        <title>Buiding the standard Hsqldb jar file with Ant</title>

        <screen>ant hsqldb</screen>
      </example>

      <simpara>The Ant method always builds a jar with the JDK that is used by
      Ant and specified in its JAVA_HOME environment variable.</simpara>
    </section>

    <section>
      <title>Building for Older JDKs</title>

      <para>HyperSQL version 2.0 cannot be directly compiled or used with JDK
      1.4. It may be possible to use the RetroTranslator tool to achieve this.
      The suggested procedure is as follows: First use Ant with JDK 1.5 and
      build the jar. Then translate the jar using RetroTranslator with
      backport (which bundles replacement classes for concurrency control).
      This translation should cover the concurrency features that are specific
      to version 1.5 and later.<informalexample>
          <screen>ant switchtojdk14
ant hsqldb
-- translate the jar
</screen>
        </informalexample></para>
    </section>
  </section>

  <section>
    <title>Building with IDE's</title>

    <simpara>All HyperSQL source files are supplied ready to compile. There is
    no complex pre-compile stage. It is therefore possible to compile the
    sources with an IDE, without using ant. Only if compilation with Java 1.5
    is required, you should first run the Ant code switcher task before
    compiling and remove from the source directories a few source files that
    are specific to Java 6 (these are listed in the build.xml file).</simpara>
  </section>

  <section>
    <title>Hsqldb CodeSwitcher</title>

    <simpara>CodeSwitcher is a tool to manage different version of Java source
    code. It allows to compile HyperSQL for different JDKs. It is something
    like a precompiler in C but it works directly on the source code and does
    not create intermediate output or extra files.</simpara>

    <simpara>CodeSwitcher is used internally in the Ant build. You do not have
    to use it separately to compile HyperSQL.</simpara>

    <simpara>CodeSwitcher reads the source code of a file, removes comments
    where appropriate and comments out the blocks that are not used for a
    particular version of the file. This operation is done for all files of a
    defined directory, and all subdirectories.</simpara>

    <example>
      <title>Example source code before CodeSwitcher is run</title>

      <programlisting>
        ...

    //#ifdef JAVA2

        properties.store(out,"hsqldb database");

    //#else

    /*

        properties.save(out,"hsqldb database");

    */

    //#endif

        ...</programlisting>
    </example>

    <simpara>The next step is to run CodeSwitcher.</simpara>

    <example>
      <title>CodeSwitcher command line invocation</title>

      <screen>
    java org.hsqldb.util.CodeSwitcher . -JAVA2</screen>
    </example>

    <simpara>The '.' means the program works on the current directory (all
    subdirectories are processed recursively). <literal>-JAVA2</literal> means
    the code labelled with JAVA2 must be switched off.</simpara>

    <example>
      <title>Source code after CodeSwitcher processing</title>

      <programlisting>
        ...

    //#ifdef JAVA2

    /*

        pProperties.store(out,"hsqldb database");

    */

    //#else

        pProperties.save(out,"hsqldb database");

    //#endif

        ...</programlisting>
    </example>

    <simpara>For detailed information on the command line options run
    <classname>java org.hsqldb.util.CodeSwitcher</classname>. Usage examples
    can be found in the build.xml file in the <filename>/build</filename>
    directory.</simpara>
  </section>

  <section>
    <title>Building documentation</title>

    <simpara>The JavaDoc can be built simply by invoking the javadoc
    target.</simpara>

    <simpara>The two Guides are in DocBook XML source format. To rebuild, run
    the Ant target <literal>gen-docs</literal>. Instructions will be
    displayed. See the file <filename>doc-src/readme-docauthors.txt</filename>
    for tips.</simpara>
  </section>
</appendix>
