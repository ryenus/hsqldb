<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<appendix version="5.0" xml:id="building-app"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:ns5="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1998/Math/MathML"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <!-- We declare the default namespace + those for prefixes xlink: and xi: in
       the root element, so we can use them anywhere in this file. -->

  <info>
    <title xml:id="building-title">Building HSQLDB Jars</title>

    <subtitle>How to build customized or specialized jar files</subtitle>

    <author>
      <personname><firstname>Blaine</firstname>
      <surname>Simpson</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <author>
      <personname><firstname>Fred</firstname>
      <surname>Toussi</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>&timestamp;</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>Building</keyword>

      <keyword>Ant</keyword>

      <keyword>Gradle</keyword>
    </keywordset>
  </info>

  <section xml:id="bga_overview">
    <title>Purpose</title>

    <simpara>From version 2.4.0, the <filename>hsqldb.jar</filename> file
    supplied in the zip release package is tested and built with Java 8. The
    code is also tested extensively with Java 6 as well as the latest Java
    versions. If you want to run with a Java 6 JVM, or build a Java 11 module,
    or use an alternative jar (<filename>hsqldb-min.jar</filename>, etc.), you
    must build the desired jar with a JDK. You can also find official jars
    built with Java 6 and Java 11 in major maven repositories as well as
    downloads from hsqldb.org.</simpara>

    <simpara>The Gradle task / Ant target <literal>explainjars</literal>
    reports the versions of Java and Ant actually used.</simpara>

    <simpara>If you want to change Ant or Gradle build settings, edit the text
    file <filename>build.properties</filename> in the HyperSQL
    <filename>build</filename> directory (creating it if it doesn't exist
    yet), and enter your properties using Java properties file syntax. (You
    can also use <filename>local-docbook.properties</filename> in the same way
    for DocBook-specific properties).</simpara>
  </section>

  <section xml:id="bga_gradle_invoke">
    <title>Building with Gradle</title>

    <titleabbrev>Building with Gradle</titleabbrev>

    <indexterm significance="preferred">
      <primary>Gradle</primary>
    </indexterm>

    <simpara>Unlike most software build systems, you do not need to have the
    Gradle system installed on your computer to use it. You don't need to
    understand the details to use it, but this is the purpose of the
    <filename>gradlew</filename> <emphasis>wrapper</emphasis> scripts that you
    can see in HyperSQL's <filename>build</filename> directory. If you want or
    need to learn more about Gradle, you can start on the <link
    xlink:href="http://gradle.org"> Gradle web site</link>.</simpara>

    <note>
      <title>Gradle honors <varname>JAVA_HOME</varname></title>

      <simpara>Gradle can find the Java to use by finding out where
      <literal>java</literal> is available from, but if environmental variable
      <varname>JAVA_HOME</varname> is set, that will override. Therefore, if
      you have multiple JREs or JDKs installed, or don't know if multiple are
      installed, you should set environmental variable
      <varname>JAVA_HOME</varname> to definitively eliminate all
      ambiguity.</simpara>
    </note>

    <important>
      <title>Rare Gotcha</title>

      <simpara>Depending on your operating system, version, and how you
      installed your JDK, Gradle may not be able to find the JDK. Gradle will
      inform you if this happens. The easiest way to fix this problem is to
      set environmental variable <varname>JAVA_HOME</varname> to the root
      directory where your Java SDK is installed. (See previous
      <emphasis>note</emphasis> for justification). So as not to get bogged
      down in the details here, if you don't know how to set an environmental
      variable, I ask you to utilize a search engine.</simpara>
    </important>

    <simpara>You can invoke Gradle builds from the command-line.</simpara>

    <procedure>
      <step>
        <simpara>Get a command-line shell. Windows users can use either
        <guimenuitem>Start/Run...</guimenuitem> or <guimenuitem>Start/Start
        Search</guimenuitem>, and enter "<literal>cmd</literal>". Non-windows
        users will know how to get a shell.</simpara>
      </step>

      <step>
        <simpara>In the shell, cd to the <filename>build</filename> directory
        under the root directory where you extracted or installed HyperSQL to.
        (Operating system search or find functions can be used if you can't
        find it quickly by poking around on the command line or with Windows
        Explorer, etc.).</simpara>
      </step>

      <step>
        <simpara>Windows users can ignore this step. UNIX shell users should
        ensure that the current directory (<literal>.</literal>) is in their
        search path, or prefix their <literal>gradlew</literal> command in the
        next step with <literal>./</literal> (e.g., like
        <literal>./gradlew</literal>).</simpara>
      </step>

      <step>
        <simpara>In the shell, run <literal>gradlew</literal> for a
        build.</simpara>

        <simpara>If you ran just <literal>gradlew</literal>, then you will be
        presented with simple instructions for how to do everything that you
        want to do. Basically, you will run the same
        <literal>gradlew</literal> command repeatedly, with different switches
        and arguments for each build target.</simpara>

        <note>
          <simpara>Gradle's -v switch reports version details more directly
          than the <literal>explainjars</literal> task does, from the
          operating system version to the Groovy version (the language
          interpreter used for Gradle instructions).</simpara>
        </note>
      </step>
    </procedure>

    <simpara>For example, the command below builds the
    <filename>hsqldb.jar</filename> file:</simpara>

    <informalexample>
      <screen> gradlew hsqldb</screen>
    </informalexample>

    <simpara>The Gradle invocations actually run Ant build targets. Some of
    the targets are listed in the next section.</simpara>
  </section>

  <section xml:id="bga_building_ant">
    <title>Building with Apache Ant</title>

    <titleabbrev>Building with Ant</titleabbrev>

    <indexterm significance="preferred">
      <primary>Ant</primary>
    </indexterm>

    <simpara>You should use version 1.9 or 1.10 of Ant (Another Neat Tool) to
    do Ant builds with HyperSQL.</simpara>

    <section xml:id="bga_ant_obtaining">
      <title>Obtaining Ant</title>

      <simpara>Ant is a part of the Apache Project.</simpara>

      <itemizedlist>
        <listitem>
          <simpara><link xlink:href="http://ant.apache.org">Home of the Apache
          Ant project</link></simpara>
        </listitem>

        <listitem>
          <simpara>The <link
          xlink:href="http://ant.apache.org/manual/install.html#installing">
          Installing Ant</link> page of the <link
          xlink:href="http://ant.apache.org/manual">Ant Manual</link>. Follow
          the directions for your platform.</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="bga_ant_build">
      <title>Building HSQLDB with Ant</title>

      <simpara>Once you have unpacked the zip package for hsqldb, under the
      <filename>/hsqldb</filename> folder, in <filename>/build</filename>
      there is a <filename>build.xml</filename> file that builds the
      <filename>hsqldb.jar</filename> with Ant (Ant must be already
      installed). To use it, change to <filename>/build</filename> then
      type:</simpara>

      <informalexample>
        <screen> ant -projecthelp</screen>
      </informalexample>

      <simpara>This displays the available Ant targets, which you can supply
      as command line arguments to ant. These include</simpara>

      <variablelist>
        <varlistentry>
          <term>hsqldb</term>

          <listitem>
            <simpara>to build the <filename>hsqldb.jar</filename> file. This
            contains the engine and the GUI database manager.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>explainjars</term>

          <listitem>
            <simpara>Lists all targets which build jar files, with an
            explanation of the purposes of the different jars.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean</term>

          <listitem>
            <simpara>to clean up the /classes directory that is created during
            a build.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean-all</term>

          <listitem>
            <simpara>to remove the old jar and doc files as well as
            clean.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>javadoc</term>

          <listitem>
            <simpara>to build javadoc for all public classes accessible to
            user applications.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>dbmanswing</term>

          <listitem>
            <simpara>to build the <filename>dbmanagerswing.jar</filename>
            file</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmain</term>

          <listitem>
            <simpara>to build a smaller jar for HSQLDB that does not contain
            utilities</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmin</term>

          <listitem>
            <simpara>to build a small jar that supports
            <emphasis>in-process</emphasis> catalogs, but not running HyperSQL
            Servers.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sqltool</term>

          <listitem>
            <simpara>to build sqltool.jar, which contains only the SqlTool
            classes.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>...</term>

          <listitem>
            <simpara>Many more targets are available. Run <literal>ant
            -p</literal> and <literal>ant explainjars</literal>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist>

      <simpara>HSQLDB can be built in any combination of JRE (Java Runtime
      Environment) versions and many jar file sizes.</simpara>

      <simpara>A jar built with an older JRE is compatible for use with a
      newer JRE (you can compile with Java 6 and run with 8). But the newer
      JDBC capabilities of HyperSQL and the JRE will be not be
      available.</simpara>

      <simpara>The smallest engine jar (<filename>hsqldbmin.jar</filename>)
      contains the engine and the HSQLDB JDBC Driver client. The default size
      (<filename>hsqldb.jar</filename>) also contains server mode support and
      the utilities. The largest size
      (<filename>hsqldbtest.jar</filename>)includes some test classes as well.
      Before building the <filename>hsqldbtest.jar</filename> package, you
      should download the junit jar from <link
      xlink:href="http://www.junit.org"/> and put it in the
      <filename>/lib</filename> directory, alongside
      <filename>servlet.jar</filename>, which is included in the .zip
      package.</simpara>

      <para>If you want your code built for high performance, as opposed to
      debugging (in the same way that we make our production distributions),
      make a file named <filename>build.properties</filename> in your build
      directory with the contents <informalexample>
          <screen>build.debug: false</screen>
        </informalexample>The resulting Java binaries will be faster and
      smaller, at the cost of exception stack traces not identifying source
      code locations (which can be extremely useful for debugging).</para>

      <simpara>After installing Ant on your system use the following command
      from the <filename>/build</filename> directory. Just run <literal>ant
      explainjars</literal> for a concise list of all available jar
      files.</simpara>

      <informalexample>
        <screen>ant explainjars</screen>
      </informalexample>

      <simpara>The command displays a list of different options for building
      different sizes of the HSQLDB Jar. The default is built using:</simpara>

      <example>
        <title>Buiding the standard HSQLDB jar file with Ant</title>

        <screen>ant hsqldb</screen>
      </example>

      <simpara>The Ant method always builds a jar with the JDK that is used by
      Ant and specified in its JAVA_HOME environment variable.</simpara>

      <para>The jars can be compiled with JDK 6 or later. Build has been
      tested under JDK versions 6, 8, 9, 10, 11, etc. The same Ant version can
      be used with all the tested JDKs.</para>
    </section>
  </section>

  <section xml:id="bga_build_ide">
    <title>Building with IDE Compilers</title>

    <simpara>The Ant build.xml can be used with most IDEs to build the Jar
    targets. All HyperSQL source files are supplied ready to compile. It is
    therefore possible to compile the sources without using Ant direcly. If
    compilation with Java 1.6 is required, you should run the Ant switchtojdk6
    target before compiling to modify the files that have code blocks specific
    to Java 8 or above (these are listed in the jdkcodeswitch.list
    file).</simpara>
  </section>

  <section xml:id="bga_codeswitcher">
    <title>HyperSQL CodeSwitcher</title>

    <simpara>CodeSwitcher is a tool to manage different version of Java source
    code. It allows to compile HyperSQL for different JDKs. It is something
    like a precompiler in C but it works directly on the source code and does
    not create intermediate output or extra files.</simpara>

    <simpara>CodeSwitcher is used internally in the Ant build. You do not have
    to invoke it separately to compile HyperSQL.</simpara>

    <simpara>CodeSwitcher reads the source code of a file, removes comments
    where appropriate and comments out the blocks that are not used for a
    particular version of the file. This operation is done for all files of a
    defined directory, and all subdirectories.</simpara>

    <example>
      <title>Example source code before CodeSwitcher is run</title>

      <programlisting>
 ...

 //#ifdef JAVA8

     properties.store(out,"hsqldb database");

 //#else

 /*

     properties.save(out,"hsqldb database");

 */

 //#endif

 ...</programlisting>
    </example>

    <simpara>The next step is to run CodeSwitcher.</simpara>

    <example>
      <title>CodeSwitcher command line invocation</title>

      <screen>
 java org.hsqldb.util.CodeSwitcher . -JAVA8</screen>
    </example>

    <simpara>The '.' means the program works on the current directory (all
    subdirectories are processed recursively). <literal>-JAVA8</literal> means
    the code labelled with JAVA8 must be switched off.</simpara>

    <example>
      <title>Source code after CodeSwitcher processing</title>

      <programlisting>
     ...

 //#ifdef JAVA8

 /*

     pProperties.store(out,"hsqldb database");

 */

 //#else

     pProperties.save(out,"hsqldb database");

 //#endif

     ...</programlisting>
    </example>

    <simpara>For detailed information on the command line options run
    <classname>java org.hsqldb.util.CodeSwitcher</classname>. Usage examples
    can be found in the build.xml file in the <filename>/build</filename>
    directory.</simpara>
  </section>

  <section xml:id="bga_build_docs">
    <title>Building Documentation</title>

    <simpara>The JavaDoc can be built simply by invoking the javadoc
    task/target with Gradle or Ant.</simpara>

    <para>The two Guides (the one you are reading now plus the Utilities user
    guide) are in DocBook XML source format. To rebuild to PDF or one of the
    HTML output formats from the XML source, run the Gradle target
    <literal>gen-docs</literal> (or the Ant target
    <literal>gen-docs</literal>). Instructions will be displayed. In
    particular <itemizedlist>
        <listitem>
          <simpara>Obtain the HyperSQL documentation source. We no longer
          include our Guide source files in our main distribution zip file, in
          order to keep it small. You may want to build from the trunk branch
          or the latest release tag. You can download a static snapshot
          tarball from https://sourceforge.net/p/hsqldb/svn/HEAD/tree/ or you
          can use a Subversion client such as TortoiseSVN to export a snapshot
          or check out a work area.</simpara>
        </listitem>

        <listitem>
          <simpara>You must locally install the DocBook set of image files,
          which are available for download from Sourceforge. The
          <literal>gen-docs</literal> task/target will tell you of a Gradle
          task that you can use to download and install them automatically.
          This Gradle task, <literal>installDbImages</literal>, will tell you
          how to edit a properties text file to tell it what directory to
          install the files into. (Command-line, as opposed to GUI, builders,
          can use the Gradle <literal>-P</literal> switch to set the property,
          instead of editing, if they prefer).</simpara>
        </listitem>

        <listitem>
          <simpara>You can optionally install the entire DocBook style sheets
          (instead of just the DocBook images within it), character entity
          definitions, and RNG schema file, to speed up doc build times and
          minimize dependency of future builds upon network or Internet. An
          intermediate approach would be to install these resources onto an
          HTTP server or shared network drive of your own. See the comments at
          the top of the file <filename>build.xml</filename> in the HyperSQL
          <filename>build</filename> directory about where to obtain these
          things and how to hook them in. The same Gradle task
          <literal>installDbImages</literal> explained above can download and
          install the entire stylesheet bundle (this option is offered the
          first time that you run the <literal>installDbImages</literal>
          task).</simpara>
        </listitem>
      </itemizedlist></para>

    <tip>
      <simpara>If running Gradle, you probably want to turn logging up to
      level <emphasis>info</emphasis> for generation and validation tasks,
      because the default <emphasis>warn/lifecycle</emphasis> level doesn't
      give much feedback.</simpara>
    </tip>

    <simpara>The task/target <literal>validate-docs</literal> is also very
    useful to DocBook builders.</simpara>

    <simpara>The documentation license does not allow you to post
    modifications to our guides, but you can modify them for internal use by
    your organization, and you can use our DocBook system to write new DocBook
    documents related or unrelated to HyperSQL. To create new DocBook
    documents, create a subdirectory off of <filename>doc-src</filename> for
    each new document, with the main DocBook source file within having same
    name as the directory plus <literal>.xml</literal>. See the peer directory
    <filename>util-guide</filename> or <filename>guide</filename> as an
    example. If you use the high-level tasks/target
    <literal>gen-docs</literal> or <literal>validate-docs</literal>, then copy
    and paste to add new stanzas to these targets in file
    <filename>build.xml</filename>.</simpara>

    <simpara>Editors of DocBook documents (see previous paragraph for motive)
    may find it useful to have a standalone XML validator so you can do your
    primary editing without involvement of the build system. Use the Gradle
    target <literal>standaloneValidation</literal> for this. It will tell you
    how to set a build property to tell it where to install the validator, and
    will give instructions on how to use it.</simpara>

    <para>There are several properties that can be used to dramatically reduce
    run times for partial doc builds. Read about these properties in comment
    at the top of the file <filename>build-docbook.xml</filename> in the
    <filename>build</filename> directory. <itemizedlist>
        <listitem>
          <simpara>validation.skip</simpara>
        </listitem>

        <listitem>
          <simpara>html.skip</simpara>
        </listitem>

        <listitem>
          <simpara>chunk.skip</simpara>
        </listitem>

        <listitem>
          <simpara>fo.skip</simpara>
        </listitem>

        <listitem>
          <simpara>pdf.skip</simpara>
        </listitem>

        <listitem>
          <simpara>doc.name</simpara>
        </listitem>

        <listitem>
          <simpara>doc.target</simpara>
        </listitem>
      </itemizedlist></para>

    <simpara>See the file <filename>doc-src/readme-docauthors.txt</filename>
    for details about our DocBook build system (though as I write this it is
    somewhat out of date).</simpara>
  </section>
</appendix>
