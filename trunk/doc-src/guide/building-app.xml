<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<appendix version="5.0" xml:id="building-app"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:ns5="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1998/Math/MathML"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <!-- We declare the default namespace + those for prefixes xlink: and xi: in
       the root element, so we can use them anywhere in this file. -->

  <info>
    <title xml:id="building-title">Building HyperSQL Jars</title>

    <subtitle>How to build customized or specialized jar files</subtitle>

    <author>
      <personname><firstname>Fred</firstname>
      <surname>Toussi</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>$Date$</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>Building</keyword>

      <keyword>Ant</keyword>
    </keywordset>
  </info>

  <section>
    <title>Purpose</title>

    <simpara>From 2.0, the supplied <filename>hsqldb.jar</filename> file is
    built with Java 1.6. If you want to run with a 1.5 or older JVM, or if you
    want to use an alternative jar (<filename>hsqldb-min.jar</filename>, etc.)
    you must build the desired jar with a Java JDK and Ant version
    1.7.</simpara>
  </section>

  <section xml:id="building-ant-sect">
    <title>Building with Apache Ant</title>

    <titleabbrev>Building with Ant</titleabbrev>

    <indexterm significance="preferred">
      <primary>Ant</primary>
    </indexterm>

    <simpara>You should use version 1.7.x of Ant (Another Neat Tool) to do
    builds with HyperSQL.</simpara>

    <section>
      <title>Obtaining Ant</title>

      <simpara>Ant is a part of the Jakarta/Apache Project.</simpara>

      <itemizedlist>
        <listitem>
          <simpara><link xlink:href="http://ant.apache.org">Home of the Apache
          Ant project</link></simpara>
        </listitem>

        <listitem>
          <simpara>The <link
          xlink:href="http://ant.apache.org/manual/install.html#installing">
          Installing Ant</link> page of the <link
          xlink:href="http://ant.apache.org/manual">Ant Manual</link>. Follow
          the directions for your platform.</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Building Hsqldb with Ant</title>

      <simpara>Once you have unpacked the zip package for hsqldb, under the
      <filename>/hsqldb</filename> folder, in <filename>/build</filename>
      there is a <filename>build.xml</filename> file that builds the
      <filename>hsqldb.jar</filename> with Ant (Ant must be already
      installed). To use it, change to <filename>/build</filename> then
      type:</simpara>

      <informalexample>
        <screen> ant -projecthelp</screen>
      </informalexample>

      <simpara>This displays the available ant targets, which you can supply
      as command line arguments to ant. These include</simpara>

      <variablelist>
        <varlistentry>
          <term>hsqldb</term>

          <listitem>
            <simpara>to build the <filename>hsqldb.jar</filename>
            file</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>explainjars</term>

          <listitem>
            <simpara>Lists all targets which build jar files, with an
            explanation of the purposes of the different jars.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean</term>

          <listitem>
            <simpara>to clean up the /classes directory that is
            created</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean-all</term>

          <listitem>
            <simpara>to remove the old jar and doc files as well</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>javadoc</term>

          <listitem>
            <simpara>to build javadoc</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmain</term>

          <listitem>
            <simpara>to build a smaller jar for HSQLDB that does not contain
            utilities</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqljdbc</term>

          <listitem>
            <simpara>to build an extremely small jar containing only the
            client-side JDBC driver (can connect only to a HyperSQL
            Server).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmin</term>

          <listitem>
            <simpara>to build a small jar that supports
            <emphasis>in-process</emphasis> catalogs, but neither running nor
            connecting to HyperSQL Servers.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sqltool</term>

          <listitem>
            <simpara>to build sqltool.jar, which contains only the SqlTool
            classes.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>...</term>

          <listitem>
            <simpara>Many more targets are available. Run <literal>ant
            -p</literal> and <literal>ant explainjars</literal>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist>

      <simpara>HSQLDB can be built in any combination of two JRE (Java Runtime
      Environment) versions and many jar file sizes.</simpara>

      <simpara>A jar built with an older JRE is compatible for use with a
      newer JRE (you can compile with Java 1.5 and run with 1.6). But the
      newer JDBC capabilities of the JRE will be not be available.</simpara>

      <simpara>The client jar (<filename>hsqljdbc.jar</filename>) contains
      only the HSQLDB JDBC Driver client. The smallest engine jar
      (<filename>hsqldbmin.jar</filename>) contains the engine and the HSQLDB
      JDBC Driver client. The default size (<filename>hsqldb.jar</filename>)
      also contains server mode support and the utilities. The largest size
      (<filename>hsqldbtest.jar</filename>)includes some test classes as well.
      Before building the <filename>hsqldbtest.jar</filename> package, you
      should download the junit jar from <link
      xlink:href="http://www.junit.org"></link> and put it in the
      <filename>/lib</filename> directory, alongside
      <filename>servlet.jar</filename>, which is included in the .zip
      package.</simpara>

      <para>If you want your code built for high performance, as opposed to
      debugging (in the same way that we make our production distributions),
      make a file named <filename>build.properties</filename> in your build
      directory with the contents <informalexample>
          <screen>build.debug: false</screen>
        </informalexample>The resulting Java binaries will be faster and
      smaller, at the cost of exception stack traces not identifying source
      code locations (which can be extremely useful for debugging).</para>

      <simpara>After installing Ant on your system use the following command
      from the <filename>/build</filename> directory. Just run <literal>ant
      explainjars</literal> for a concise list of all available jar
      files.</simpara>

      <informalexample>
        <screen>ant explainjars</screen>
      </informalexample>

      <simpara>The command displays a list of different options for building
      different sizes of the HSQLDB Jar. The default is built using:</simpara>

      <example>
        <title>Buiding the standard Hsqldb jar file with Ant</title>

        <screen>ant hsqldb</screen>
      </example>

      <simpara>The Ant method always builds a jar with the JDK that is used by
      Ant and specified in its JAVA_HOME environment variable.</simpara>
    </section>

    <section>
      <title>Building for Older JDKs</title>

      <para>HyperSQL version 2.0 cannot be directly compiled or used with JDK
      1.4. It may be possible to use the RetroTranslator tool to achieve this.
      The suggested procedure is as follows: First use Ant with JDK 1.5 and
      build the jar. Then translate the jar using RetroTranslator with
      backport (which bundles replacement classes for concurrency control).
      This translation should cover the concurrency features that are specific
      to version 1.5 and later.<informalexample>
          <screen>ant switchtojdk14
ant hsqldb
-- translate the jar
</screen>
        </informalexample></para>
    </section>
  </section>

  <section>
    <title>Building with IDE's</title>

    <simpara>All HyperSQL source files are supplied ready to compile. There is
    no complex pre-compile stage. It is therefore possible to compile the
    sources with an IDE, without using ant. Only if compilation with Java 1.5
    is required, you should first run the Ant code switcher task before
    compiling and remove from the source directories a few source files that
    are specific to Java 6 (these are listed in the build.xml file).</simpara>
  </section>

  <section>
    <title>Hsqldb CodeSwitcher</title>

    <simpara>CodeSwitcher is a tool to manage different version of Java source
    code. It allows to compile HyperSQL for different JDKs. It is something
    like a precompiler in C but it works directly on the source code and does
    not create intermediate output or extra files.</simpara>

    <simpara>CodeSwitcher is used internally in the Ant build. You do not have
    to use it separately to compile HyperSQL.</simpara>

    <simpara>CodeSwitcher reads the source code of a file, removes comments
    where appropriate and comments out the blocks that are not used for a
    particular version of the file. This operation is done for all files of a
    defined directory, and all subdirectories.</simpara>

    <example>
      <title>Example source code before CodeSwitcher is run</title>

      <programlisting>
        ...

    //#ifdef JAVA2

        properties.store(out,"hsqldb database");

    //#else

    /*

        properties.save(out,"hsqldb database");

    */

    //#endif

        ...</programlisting>
    </example>

    <simpara>The next step is to run CodeSwitcher.</simpara>

    <example>
      <title>CodeSwitcher command line invocation</title>

      <screen>
    java org.hsqldb.util.CodeSwitcher . -JAVA2</screen>
    </example>

    <simpara>The '.' means the program works on the current directory (all
    subdirectories are processed recursively). <literal>-JAVA2</literal> means
    the code labelled with JAVA2 must be switched off.</simpara>

    <example>
      <title>Source code after CodeSwitcher processing</title>

      <programlisting>
        ...

    //#ifdef JAVA2

    /*

        pProperties.store(out,"hsqldb database");

    */

    //#else

        pProperties.save(out,"hsqldb database");

    //#endif

        ...</programlisting>
    </example>

    <simpara>For detailed information on the command line options run
    <classname>java org.hsqldb.util.CodeSwitcher</classname>. Usage examples
    can be found in the build.xml file in the <filename>/build</filename>
    directory.</simpara>
  </section>

  <section>
    <title>Building documentation</title>

    <simpara>The JavaDoc can be built simply by invoking the javadoc
    target.</simpara>

    <simpara>The two Guides are in DocBook XML source format. To rebuild, run
    the Ant target <literal>gen-docs</literal>. Instructions will be
    displayed. See the file <filename>doc-src/readme-docauthors.txt</filename>
    for tips.</simpara>
  </section>
</appendix>
