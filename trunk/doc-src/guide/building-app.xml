<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<appendix version="5.0" xml:id="building-app"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:ns5="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1998/Math/MathML"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <!-- We declare the default namespace + those for prefixes xlink: and xi: in
       the root element, so we can use them anywhere in this file. -->

  <info>
    <title xml:id="building-title">Building HyperSQL Jars</title>

    <subtitle>How to build customized or specialized jar files</subtitle>

    <author>
      <personname><firstname>Fred</firstname>
      <surname>Toussi</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>&timestamp;</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>Building</keyword>

      <keyword>Ant</keyword>

      <keyword>Gradle</keyword>
    </keywordset>
  </info>

  <section>
    <title>Purpose</title>

    <simpara>From 2.0, the supplied <filename>hsqldb.jar</filename> file is
    built with Java 1.6. If you want to run with a 1.5 or older JVM, or if you
    want to use an alternative jar (<filename>hsqldb-min.jar</filename>, etc.)
    you must build the desired jar with a Java SDK.</simpara>

    <simpara>
      The Gradle task / Ant target <literal>explainjars</literal> reports the
      versions of Java and Ant actually used.
    </simpara>
  </section>

  <section xml:id="gradle-invoke--sect">
    <title>Building with Gradle</title>

    <simpara>
      As noted above, Java SDK 5 or later is required.
    </simpara>
    <simpara>
      Unlike most software build systems, you do not need to have the Gradle
      system installed on your computer to use it.
      You don't need to understand the details to use it, but this is the
      purpose of the <filename>gradlew</filename> <emphasis>wrapper</emphasis>
      scripts that you can see in HyperSQL's <filename>build</filename>
      directory.
      If you want or need to learn more about Gradle, you can start on the
      <link xlink:href="http://gradle.org/documentation">
      Gradle Documentation page</link> on the
      <link xlink:href="http://gradle.org"> Gradle web site</link>.
    </simpara>

    <note><title>Gradle honors <varname>JAVA_HOME</varname></title><simpara>
      Gradle can find the Java to use by finding out where
      <literal>java</literal> is available from, but if environmental variable
      <varname>JAVA_HOME</varname> is set, that will override.
      Therefore, if you have multiple JREs or JDKs installed,
      or don't know if if multiple are insalled, you should set
      environmental variable <varname>JAVA_HOME</varname> to
      definitely eliminate all ambiguity.
    </simpara></note>
    <important><title>Rare Gotcha</title><simpara>
      Depending on your operating system, version, and how you installed
      your JDK, Gradle may not be able to find the JDK.
      Gradle will inform you if this happens.
      The easiest way to fix this problem is to set environmental variable
      <varname>JAVA_HOME</varname> to the root directory where your Java
      SDK is installed.
      (See previous <emphasis>note</emphasis> for justification).
      So as not to get bogged down in the details here, if you don't know how
      set an environmental variable, I ask you to utilize a search engine.
    </simpara></important>

    <indexterm significance="preferred">
      <primary>Gradle</primary>
    </indexterm>

    <section><title>Invoking a Gradle Build Graphically</title>
      <simpara>
        Whether from an IDE, a shortcut or launch icon, to run a Gradle
        graphical build you just need to exeute either the file
        <literal>gradle-gui.cmd</literal>
        (on Windows) or <literal>gradle-gui</literal>
        (all other platforms), both of which reside in the
        <filename>build</filename> directory of your HyperSQL distribution.
      </simpara>
      <simpara>I will explain how to invoke a graphical Gradle build from
        Windows Explorer and from Eclipse IDE.
        Users of other operating systems should be able to infer how to
        use their own file manager in the same way as shown for Internet
        Explorer.
        Users who want a desktop shortcut, quick-launch icon should first
        get Gradle working from a file manager (like Windows Explorer),
        then seek out instructions for making shortcuts, etc. for your
        operating system or desktop manager.  (Try a web search).
      </simpara> <simpara>
        Some IDEs, like IntelliJ have direct support for Gradle.
        The Spring Framework team is working on a sophisticated plugin for
        using Gradle with their IDE.
        But I'm going to document a very basic setup done with Eclipse
        because it's very servicable and a very similar procedure is likely
        to work with all other IDEs.
      </simpara> <simpara>
        If you do use and enjoy Gradle, then I urge you to make the product
        better by registing a free account for yourself at
        <link xlink:href="http://issues.gradle.org/">the Gradle Jira site</link>
        and vote for critical usability issues like
        <link xlink:href="http://issues.gradle.org/browse/GRADLE-427">GRADLE-427</link>,
        <link xlink:href="http://issues.gradle.org/browse/GRADLE-1855">GRADLE-1855</link>,
        <link xlink:href="http://issues.gradle.org/browse/GRADLE-1870">GRADLE-1870</link>,
        <link xlink:href="http://issues.gradle.org/browse/GRADLE-1871">GRADLE-1871</link>,
        to help to improve the product.
      </simpara>
      <procedure><title>Invoking Gradle GUI from Windows Explorer</title>
        <step><simpara>
          Start up Windows explorer.
          Depending on your Windows version, it will be in the Start Menu,
          or in the menu you get when you right-click
          <guimenuitem>Start</guimenuitem>.
        </simpara></step> <step><simpara>
          Navigate Windows Explorer to the <filename>build</filename>
          directory within your HyperSQL installation.
        </simpara></step> <step><simpara>
          Find an icon or line (depending on your Windows Explorer view)
          for the file <filename>gradle-gui.cmd</filename>.
          If there is no listing for <filename>gradle-gui.cmd</filename>,
          but two listings for <filename>gradle-gui</filename>, then
          you want the one signified by text, icon, or mouse-over tooltip,
          as a <emphasis>batch or CMD file</emphasis>.
          Double-click this item.
        </simpara></step>
      </procedure>
      <procedure><title>Setting up Gradle Graphical Builds from Eclipse IDE</title>
        <step><simpara>
          From Eclipse, use pulldown menu
          <guimenuitem>Run</guimenuitem> /
          <guimenuitem>External Tools</guimenuitem> /
          <guimenuitem>External Tools Configurations...</guimenuitem>.
        </simpara></step> <step><simpara>
          Right-click on Program in the left nagivator 
          Right-click <guilabel>Project</guilabel> in the left navigator panel
          and select <guimenuitem>New</guimenuitem>.
          (Depending on the state of your workspace, instead of 
          <guimenuitem>New</guimenuitem> in the context-sensitive menu, there
          may be a <guilabel>New_configuration</guilabel> or similar item
          nested under <guilabel>Program</guilabel>, in which case you should
          select that).
        </simpara></step> <step><simpara>
          To the right, change the value in the<guilabel>Name:</guilabel> field
          to <literal>HSQLDB Gradle</literal> (or whatever name you want for
          this launcher config (this Gradle launcher is only for your HSQLDB
          project).
        </simpara></step> <step><simpara>
          Make sure that the <guilabel>Main</guilabel> tab is selected.
        </simpara></step> <step><para>
          For the <guimenuitem>Location:</guimenuitem> field, use the
          <guimenuitem>Browse Workspace...</guimenuitem> button to
          navigate to and select the <filename>gradle-gui.cmd</filename>
          (Windows) or <filename>gradle-gui</filename> (other) file in the
          <filename>build</filename> directory of your HyperSQL project.
          <mediaobject>
            <imageobject>
              <imagedata fileref="eclipse-gradle-cfg.png" align="center"
                         format="PNG"/>
             <!-- Instead of specifying width="6.5in" here, I've scaled the
                  image file itself.  This causes HTML representation to
                  display the image without distortion and reduction with its
                  native size, and is manually sized correctly for PDF/PS. -->
            </imageobject>
            <caption> <simpara>Configuring Gradle GUI Launcher in Eclipse</simpara> </caption>
          </mediaobject>
          Depending on your Eclipse version and workspace setup, the value
          populated into the <guilabel>Location:</guilabel> field after you
          select the program may appear very differently than in this screen
          shot.
        </para></step> <step><simpara>
          Click the <guilabel>Run</guilabel> button.
          The Gradle Gui should run.
          (If you just <guilabel>Apply</guilabel> and
          <guilabel>Close</guilabel> here instead of
          <guilabel>Run</guilabel>, the new Gradle launch item will not be
          added to the pulldown and toolbar menus).
        </simpara></step>
      </procedure>
      <para>
        After doing the Eclipse setup, you can use pulldown menu
        <guimenuitem>Run</guimenuitem> /
        <guimenuitem>External Tools</guimenuitem> or the equivalent tool
        bar button button to launch the Gradle Gui.
        <mediaobject>
          <imageobject>
            <imagedata fileref="eclipse-gradle-invoke.png" align="center"
                       format="PNG"/>
           <!-- Instead of specifying width="6.5in" here, I've scaled the
                image file itself.  This causes HTML representation to
                display the image without distortion and reduction with its
                native size, and is manually sized correctly for PDF/PS. -->
          </imageobject>
          <caption> <simpara>Invoking Gradle GUI from Eclipse</simpara> </caption>
        </mediaobject>
        You can do this and close it after each use, or, to avoid startup
        lag, minimize it when it's not in use.
      </para>
    </section>

    <section><title>Invoking a Gradle Build from the Command Line</title>
      <simpara>
        You can invoke graphical and non-graphical Gradle builds from the
        command-line.
      </simpara>
      <procedure>
        <step><simpara>
          Get a command-line shell.
          Windows users can use either
          <guimenuitem>Start/Run...</guimenuitem> or
          <guimenuitem>Start/Start Search</guimenuitem>, and enter
          "<literal>cmd</literal>".
          Non-windows users will know how to get a shell.
        </simpara></step> <step><simpara>
          In the shell,
          cd to the <filename>build</filename> directory under the root
          directory where you extracted or installed HyperSQL to.
          (Operating system search or find functions can be used if you can't
          find it quickly by poking around on the command line or with
          Windows Explorer, etc.).
        </simpara></step> <step><simpara>
          Windows users can ignore this step.
          UNIX shell users should ensure that the current directory
          (<literal>.</literal>) is in their search path, or prefix their
          <literal>gradlew</literal> or <literal>gradle-gui</literal> command
          in the next step with <literal>./</literal> (e.g., like
          <literal>./gradlew</literal>).
        </simpara></step> <step><simpara>
          In the shell,
          run either <literal>gradle-gui</literal> for a graphical build; or
          <literal>gradlew</literal> for a text-based build.
        </simpara></step>
      </procedure>
      <simpara>
        The <filename>gradle-gui</filename> file is our own wrapper script for
        <literal>gradlew --gui</literal>.
        Be aware that both <filename>gradle-gui</filename> and
        <literal>gradlew --gui</literal> suffer from the limitation that the
        <literal>--gui</literal> switch is mutually exclusive with most or
        all other arguments (including tasks).
        I have registered GRADLE bugs 1861 and 1863 about this.
      </simpara>
    </section>

    <section><title>Using Gradle</title>
      <section><title>Using Text-based Gradle</title>
        <simpara>
          If you ran just <literal>gradlew</literal> or
          <literal>gradlew.bat</literal>, then you will be presented with
          simple instructions for how to do everything that you want to do.
          Basically, you will run the same <literal>gradlew</literal> or
          <literal>gradle.bat</literal> command repeatedly, with different
          switches and arguments.
        </simpara>
        <note><simpara>
          Gradle's -v switch reports version details more directly than the
          <literal>explainjars</literal> task does, from the operating
          system version to the Groovy version (the language interpreter used
          for Gradle instructions).
        </simpara></note>
      </section>
      <section><title>Using the Gradle GUI</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="gradle-gui.png" align="center" format="PNG"/>
           <!-- Instead of specifying width="6.5in" here, I've scaled the
                image file itself.  This causes HTML representation to
                display the image without distortion and reduction with its
                native size, and is manually sized correctly for PDF/PS. -->
          </imageobject>
          <caption> <simpara>Sample Gradle GUI Screen</simpara> </caption>
        </mediaobject>
        <procedure> <title>First Time using Gradle Gui</title>
          <step><simpara>
            It takes the Gradle gui a while to start up, because, similar to
            an IDE, it is generating a list of details about available
            tasks.
          </simpara></step> <step><simpara>
            In the main window, in the top panel, with the
            <guilabel>Task Tree</guilabel> tab selected, you have the
            list of public tasks, sorted aphabetically.
            Down bottom is displayed the output of the last task(s) execution.
            (After startup it will show the output of the task
            <literal>tasks</literal>).
          </simpara></step> <step><simpara>
            Scroll to the <literal>help</literal> task and click it once to
            select it,
            then click the green <guilabel>Execute</guilabel> toolbar button
            above.
            (You could also have double-clicked the item, but you can use the
            selection procedure to pick multiple tasks with Control or Shift
            keys to execute multiple tasks in a single run-- and the tasks
            will execute in the same order that you had selected them).
          </simpara></step> <step><simpara>
            Scroll through and read the output of the <literal>help</literal>
            task in the bottom panel.
            Where this help screen speaks about verbosity switches, you can
            accomplish the same thing by using the
            <guimenuitem>Setup</guimenuitem> tab.
            Whenever Gradle output (in the bottom panel) talks about running
            <literal>gradlew &lt;sometask&gt;...</literal>, you can execute
            ths specified task(s) by selecting and executing them like we just
            did.
          </simpara></step>
        </procedure>

        <note><title>Gradle GUI Limitations</title><simpara>
          The Gradle GUI is fairly new and lacks some of the power available to
          text-based users.
          Most significantly, in my opinion, is the following item for
          which I have opened Gradle <emphasis>issues</emphasis> 1855.
          There is no convenient way to set build properties.
          If you want to change Ant or Gradle build settings, edit the text
          file <filename>build.properties</filename> in the HyperSQL
          <filename>build</filename> directory (creating it if it doesn't
          exist yet), and enter your propeties using Java properties file
          syntax.
          (You can also use <filename>local-docbook.properties</filename>
          in the same way for DocBook-specific properties).
        </simpara></note>
      </section>
    </section>
  </section>

  <section xml:id="building-ant-sect">
    <title>Building with Apache Ant</title>

    <titleabbrev>Building with Ant</titleabbrev>

    <indexterm significance="preferred">
      <primary>Ant</primary>
    </indexterm>

    <simpara>You should use version 1.7.x of Ant (Another Neat Tool) to do
    Ant builds with HyperSQL.</simpara>

    <section>
      <title>Obtaining Ant</title>

      <simpara>Ant is a part of the Jakarta/Apache Project.</simpara>

      <itemizedlist>
        <listitem>
          <simpara><link xlink:href="http://ant.apache.org">Home of the Apache
          Ant project</link></simpara>
        </listitem>

        <listitem>
          <simpara>The <link
          xlink:href="http://ant.apache.org/manual/install.html#installing">
          Installing Ant</link> page of the <link
          xlink:href="http://ant.apache.org/manual">Ant Manual</link>. Follow
          the directions for your platform.</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Building Hsqldb with Ant</title>

      <simpara>Once you have unpacked the zip package for hsqldb, under the
      <filename>/hsqldb</filename> folder, in <filename>/build</filename>
      there is a <filename>build.xml</filename> file that builds the
      <filename>hsqldb.jar</filename> with Ant (Ant must be already
      installed). To use it, change to <filename>/build</filename> then
      type:</simpara>

      <informalexample>
        <screen> ant -projecthelp</screen>
      </informalexample>

      <simpara>This displays the available ant targets, which you can supply
      as command line arguments to ant. These include</simpara>

      <variablelist>
        <varlistentry>
          <term>hsqldb</term>

          <listitem>
            <simpara>to build the <filename>hsqldb.jar</filename>
            file</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>explainjars</term>

          <listitem>
            <simpara>Lists all targets which build jar files, with an
            explanation of the purposes of the different jars.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean</term>

          <listitem>
            <simpara>to clean up the /classes directory that is
            created</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>clean-all</term>

          <listitem>
            <simpara>to remove the old jar and doc files as well</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>javadoc</term>

          <listitem>
            <simpara>to build javadoc</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmain</term>

          <listitem>
            <simpara>to build a smaller jar for HSQLDB that does not contain
            utilities</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqljdbc</term>

          <listitem>
            <simpara>to build an extremely small jar containing only the
            client-side JDBC driver (can connect only to a HyperSQL
            Server).</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hsqldbmin</term>

          <listitem>
            <simpara>to build a small jar that supports
            <emphasis>in-process</emphasis> catalogs, but neither running nor
            connecting to HyperSQL Servers.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sqltool</term>

          <listitem>
            <simpara>to build sqltool.jar, which contains only the SqlTool
            classes.</simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>...</term>

          <listitem>
            <simpara>Many more targets are available. Run <literal>ant
            -p</literal> and <literal>ant explainjars</literal>.</simpara>
          </listitem>
        </varlistentry>
      </variablelist>

      <simpara>HSQLDB can be built in any combination of two JRE (Java Runtime
      Environment) versions and many jar file sizes.</simpara>

      <simpara>A jar built with an older JRE is compatible for use with a
      newer JRE (you can compile with Java 1.5 and run with 1.6). But the
      newer JDBC capabilities of the JRE will be not be available.</simpara>

      <simpara>The client jar (<filename>hsqljdbc.jar</filename>) contains
      only the HSQLDB JDBC Driver client. The smallest engine jar
      (<filename>hsqldbmin.jar</filename>) contains the engine and the HSQLDB
      JDBC Driver client. The default size (<filename>hsqldb.jar</filename>)
      also contains server mode support and the utilities. The largest size
      (<filename>hsqldbtest.jar</filename>)includes some test classes as well.
      Before building the <filename>hsqldbtest.jar</filename> package, you
      should download the junit jar from <link
      xlink:href="http://www.junit.org"></link> and put it in the
      <filename>/lib</filename> directory, alongside
      <filename>servlet.jar</filename>, which is included in the .zip
      package.</simpara>

      <para>If you want your code built for high performance, as opposed to
      debugging (in the same way that we make our production distributions),
      make a file named <filename>build.properties</filename> in your build
      directory with the contents <informalexample>
          <screen>build.debug: false</screen>
        </informalexample>The resulting Java binaries will be faster and
      smaller, at the cost of exception stack traces not identifying source
      code locations (which can be extremely useful for debugging).</para>

      <simpara>After installing Ant on your system use the following command
      from the <filename>/build</filename> directory. Just run <literal>ant
      explainjars</literal> for a concise list of all available jar
      files.</simpara>

      <informalexample>
        <screen>ant explainjars</screen>
      </informalexample>

      <simpara>The command displays a list of different options for building
      different sizes of the HSQLDB Jar. The default is built using:</simpara>

      <example>
        <title>Buiding the standard Hsqldb jar file with Ant</title>

        <screen>ant hsqldb</screen>
      </example>

      <simpara>The Ant method always builds a jar with the JDK that is used by
      Ant and specified in its JAVA_HOME environment variable.</simpara>
    </section>

    <section>
      <title>Building for Older JDKs</title>

      <para>HyperSQL version 2.0 cannot be directly compiled or used with JDK
      1.4. It may be possible to use the RetroTranslator tool to achieve this.
      The suggested procedure is as follows: First use Gradle or Ant with JDK
      1.5 and build the jar.
      Then translate the jar using RetroTranslator with
      backport (which bundles replacement classes for concurrency control).
      This translation should cover the concurrency features that are specific
      to version 1.5 and later.<informalexample>
          <screen>ant switchtojdk14
ant hsqldb
-- translate the jar
</screen>
        </informalexample></para>
    </section>
  </section>

  <section>
    <title>Building with IDE Compilers</title>

    <simpara>All HyperSQL source files are supplied ready to compile. There is
      no complex pre-compile stage. It is therefore possible to compile the
      sources with an IDE, without using Gradle or Ant.
      Only if compilation with Java 1.5
      is required, you should first run the Gradle task (or Ant target) before
      compiling and remove from the source directories a few source files that
      are specific to Java 6 (these are listed in the build.xml file).
    </simpara>
  </section>

  <section>
    <title>Hsqldb CodeSwitcher</title>

    <simpara>CodeSwitcher is a tool to manage different version of Java source
    code. It allows to compile HyperSQL for different JDKs. It is something
    like a precompiler in C but it works directly on the source code and does
    not create intermediate output or extra files.</simpara>

    <simpara>CodeSwitcher is used internally in the Ant build. You do not have
    to invoke it separately to compile HyperSQL.</simpara>

    <simpara>CodeSwitcher reads the source code of a file, removes comments
    where appropriate and comments out the blocks that are not used for a
    particular version of the file. This operation is done for all files of a
    defined directory, and all subdirectories.</simpara>

    <example>
      <title>Example source code before CodeSwitcher is run</title>

      <programlisting>
        ...

    //#ifdef JAVA2

        properties.store(out,"hsqldb database");

    //#else

    /*

        properties.save(out,"hsqldb database");

    */

    //#endif

        ...</programlisting>
    </example>

    <simpara>The next step is to run CodeSwitcher.</simpara>

    <example>
      <title>CodeSwitcher command line invocation</title>

      <screen>
    java org.hsqldb.util.CodeSwitcher . -JAVA2</screen>
    </example>

    <simpara>The '.' means the program works on the current directory (all
    subdirectories are processed recursively). <literal>-JAVA2</literal> means
    the code labelled with JAVA2 must be switched off.</simpara>

    <example>
      <title>Source code after CodeSwitcher processing</title>

      <programlisting>
        ...

    //#ifdef JAVA2

    /*

        pProperties.store(out,"hsqldb database");

    */

    //#else

        pProperties.save(out,"hsqldb database");

    //#endif

        ...</programlisting>
    </example>

    <simpara>For detailed information on the command line options run
    <classname>java org.hsqldb.util.CodeSwitcher</classname>. Usage examples
    can be found in the build.xml file in the <filename>/build</filename>
    directory.</simpara>
  </section>

  <section>
    <title>Building Documentation</title>

    <simpara>The JavaDoc can be built simply by invoking the javadoc
    target.</simpara>

    <para>The two Guides (the one you are reading now plus the Utilities
    user guide) are in DocBook XML source format. To rebuild to PDF or
    one of the HTML output formats from the XML source, run the Gradle target
    <literal>gen-docs</literal>
    (or the Ant target <literal>gen-docs</literal>).
    Instructions will be displayed.
    In particular <itemizedlist>
      <listitem><simpara>
        You must locally install the DocBook set of image files, which are
        available for download from Sourceforge.
        The <literal>gen-docs</literal> task/target will tell you of a Gradle
        task that you can use to download and install them automatically.
        This Gradle task, <literal>installDbImages</literal>, will tell you
        how to edit a properties text file to tell it what directory to
        install the files into.
        (Command-line, as opposed to GUI, builders, can use the Gradle
        <literal>-P</literal> switch to set the property, instead of editing,
        if they prefer).
      </simpara></listitem> <listitem><simpara>
        You can optionaly install the entire DocBook style sheets (instead of
        just the DocBook images within it), character entity definitions, and
        RNG schema file, to speed up doc build times and minimize dependency
        of future builds upon network or Internet.
        An intermediate approach would be to install these resources onto
        an HTTP server or shared network drive of your own.
        See the comments at the top of the file <filename>build.xml</filename>
        in the HyperSQL <filename>build</filename> directory about where to
        obtain these things and how to hook them in.
        The same Gradle task <literal>installDbImages</literal> explained
        above can download and install the entire stylesheet bundle (this
        option is offered the first time that you run the 
        <literal>installDbImages</literal> task).
      </simpara></listitem>
    </itemizedlist>
    </para>
     <tip><simpara>
      If running Gradle, you probably want to turn logging up to level
      <emphasis>info</emphasis> for DocBook-related tasks, because the default
      <emphasis>warn/lifecycle</emphasis>
      level doesn't give much feedback as DocBook builds run.
    </simpara></tip>
    <simpara>
      The task/target <literal>validate-docs</literal>
      is also very useful to DocBook builders.
    </simpara> <simpara>
      The documentation license does not all you to post modifications
      to our guides, but you can modify them for internal use by your
      organization, and you can use our DocBook system to write new DocBook
      documents related or unrelated to HyperSQL.
      To create new DocBook documents, create a subdirectory off of
      <filename>doc-src</filename> for each new document, with the main DocBook
      source file within having same name as
      the directory plus <literal>.xml</literal>.
      See the peer directory <filename>util-guide</filename> or
      <filename>guide</filename> as an example.
      If you use the high-level tasks/target <literal>gen-docs</literal> or
      <literal>validate-docs</literal>, then copy and paste to add new stanzas
      to these targets in file <filename>build.xml</filename>.
    </simpara> <simpara>
      Editors of DocBook documents (see previous paragraph for motive) may
      find it useful to have a standalone XML validator so you can do your
      primary editing without involvement of the build system.
      Use the Gradle target <literal>standaloneValidation</literal> for this.
      It will tell you how to set a build property to tell it where to
      install the validator, and will give instructions on how to use it.
    </simpara>
    <para>
      There are several properties that can be used to dramatically decrease
      run times for partial doc builds.
      Read about these properties in comment at the top of the file
      <filename>build-docbook.xml</filename> in the <filename>build</filename>
      directory.
      <itemizedlist>
        <listitem><simpara>
          validation.skip
        </simpara></listitem> <listitem><simpara>
          html.skip
        </simpara></listitem> <listitem><simpara>
          chunk.skip
        </simpara></listitem> <listitem><simpara>
          fo.skip
        </simpara></listitem> <listitem><simpara>
          pdf.skip
        </simpara></listitem> <listitem><simpara>
          doc.name
        </simpara></listitem> <listitem><simpara>
          doc.target
        </simpara></listitem>
      </itemizedlist>
    </para>
    <simpara>
      See the file <filename>doc-src/readme-docauthors.txt</filename> for
      details about our DocBook build system (though as I write this it is
      somewhat out of date).
    </simpara>
  </section>
</appendix>
