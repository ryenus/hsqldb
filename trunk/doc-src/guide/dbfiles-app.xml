<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<appendix version="5.0" xml:id="dbfiles-app"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:ns5="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1998/Math/MathML"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title xml:id="db-title">HyperSQL Database Files and Recovery</title>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>&timestamp;</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>Data</keyword>

      <keyword>Files</keyword>
    </keywordset>
  </info>

  <section xml:id="dfa_db_files">
    <title>Database Files</title>

    <para>Database catalogs opened with the <glossterm>file:</glossterm>
    protocol are stored as a set of files. This document describes the
    contents of these files and how they are stored.</para>

    <para>A database named 'test' is used in this description. The database
    files will be as follows.</para>

    <variablelist>
      <title>Database Files</title>

      <varlistentry>
        <term>test.properties</term>

        <listitem>
          <para>Contains the entry 'modified'. If the entry 'modified' is set
          to 'yes' then the database is either running or was not closed
          correctly. When the database is properly shutdown, 'modified' is set
          to 'no'. You can add the optional entry
          <property>readonly=true</property> to make the database files read
          only.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>test.script</term>

        <listitem>
          <para>This file contains the SQL statements that makes up the
          database up to the last checkpoint. All the data for MEMORY tables
          is also stored in this file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>test.data</term>

        <listitem>
          <para>This file contains the binary data records for CACHED tables
          only.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>test.backup</term>

        <listitem>
          <para>This file contains a backup of the parts of the
          <filename>test.data</filename> that have been modified since the
          last checkpoint. The file is deleted at each checkpoint or shutdown.
          The size of this file can be as large as the
          <filename>test.data</filename> file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>test.log</term>

        <listitem>
          <para>This file contains the extra SQL statements that have modified
          the database since the last checkpoint. It is used as a redo
          log.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>test.lobs</term>

        <listitem>
          <para>This file contains the lobs. If a database has no BLOB or CLOB
          object, this file will not be present. This file contains all the
          lobs that are currently in the database, as well as those that
          belong to rows that have been deleted since the last checkpoint. The
          space for deleted lobs is always reused after a CHECKPOINT.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>A CHECKPOINT is an operations that saves all the changed data and
    removes the <filename>test.log</filename> followed by the creation of an
    empty log. It also deletes the <filename>test.backup</filename> file. A
    SHUTDOWN is equivalent to a CHECKPOINT followed by closing the
    database.</para>

    <para>The disk space needed for the database depends on the amount of
    data. After the database is opened more space, up to slightly greater than
    the size of the <filename>test.script</filename> and
    <filename>test.data</filename> files is needed during operation.</para>
  </section>

  <section xml:id="dfa_file_states">
    <title>States</title>

    <para>Database is closed correctly</para>

    <itemizedlist>
      <title>State after running the <literal>SHUTDOWN</literal>
      statement</title>

      <listitem>
        <para>The <filename>test.data</filename> file is fully updated.</para>
      </listitem>

      <listitem>
        <para>There is no <filename>test.backup</filename> file.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.script</filename> contains all the metadata
        and CREATE TABLE and other DDL statements. It also contains the data
        for MEMORY tables.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.properties</filename> contains the entry
        'modified' set to 'no'.</para>
      </listitem>

      <listitem>
        <para>There is no <filename>test.log</filename> file.</para>
      </listitem>
    </itemizedlist>

    <para>Database is closed correctly with SHUTDOWN SCRIPT</para>

    <itemizedlist>
      <title>State after running the <literal>SHUTDOWN SCRIPT</literal>
      statement</title>

      <listitem>
        <para>The <filename>test.data</filename> file does not exist; all
        CACHED table data is now in the <filename>test.script</filename>
        file</para>
      </listitem>

      <listitem>
        <para>There is no <filename>test.backup</filename> file.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.script</filename> contains all the metadata
        and DDL statements, followed by the data for MEMORY, CACHED and TEXT
        tables.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.properties</filename> contains the entry
        'modified' set to 'no'.</para>
      </listitem>

      <listitem>
        <para>There is no <filename>test.log</filename> file.</para>
      </listitem>
    </itemizedlist>

    <para>Database is aborted</para>

    <para>If the database process was terminated without a SHUTDOWN, or the
    SHUTDOWN IMMEDIATELY command was used, the database is in aborted
    state.</para>

    <itemizedlist>
      <title>Aborted database state</title>

      <listitem>
        <para>The <filename>test.properties</filename> contains
        'modified=yes'.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.script</filename> contains a snapshot of the
        database at the last checkpoint.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.data</filename> file is not necessarily
        consistent.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.backup</filename> file contains just sections
        of the original <filename>test.data</filename> file that correspond to
        <filename>test.script</filename> at the time of the last
        checkpoint.</para>
      </listitem>

      <listitem>
        <para>The <filename>test.log</filename> file contain all data change
        statements executed since the last checkpoint. As a result of abnormal
        termination, the end of file may be incomplete.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="dfa_db_files_procs">
    <title>Procedures</title>

    <para>The database engine performs the following procedures internally in
    different circumstances.</para>

    <section xml:id="dfa_db_files_shutdown">
      <title>Clean Shutdown</title>

      <procedure>
        <title>Clean HyperSQL database shutdown</title>

        <step>
          <para>The <filename>test.data</filename> file is written completely
          (all the modified cached table rows are written out) and
          closed.</para>
        </step>

        <step>
          <para>The file <filename>test.script.new</filename> is created using
          the current state of the database.</para>
        </step>

        <step>
          <para>The entry 'modified' in the properties file is set to
          'yes-new-files' (Note: after this step, the
          <filename>test.data</filename> and
          <filename>test.script.new</filename> files constitute the
          database)</para>
        </step>

        <step>
          <para>The file <filename>test.log</filename> is deleted</para>
        </step>

        <step>
          <para>The file <filename>test.script</filename> is deleted</para>
        </step>

        <step>
          <para>The file <filename>test.script.new</filename> is renamed to
          <filename>test.script</filename></para>
        </step>

        <step>
          <para>The file <filename>test.backup</filename> is deleted</para>
        </step>

        <step>
          <para>The entry 'modified' in the properties file is set to
          'no'</para>
        </step>
      </procedure>
    </section>

    <section xml:id="dfa_db_files_startup">
      <title>Startup</title>

      <procedure>
        <title>Opening the Database</title>

        <step>
          <para>Check if the database files are in use by checking a special
          <filename>test.lck</filename> file.</para>
        </step>

        <step>
          <para>See if the <filename>test.properties</filename> file exists,
          otherwise create it.</para>
        </step>

        <step>
          <para>If the <filename>test.script</filename> did not exist, then
          this is a new database.</para>
        </step>

        <step>
          <para>If it is an existing database, check in the
          <filename>test.properties</filename> file if 'modified=yes'. In this
          case the RESTORE operation is performed before the database is
          opened normally.</para>
        </step>

        <step>
          <para>Otherwise, if in the <filename>test.properties</filename> file
          'modified=yes-new-files', then the (old)
          <filename>test.backup</filename> and
          <filename>test.script</filename> files are deleted if they exist and
          the new <filename>test.script.new</filename> file is renamed to
          <filename>test.script</filename>.</para>
        </step>

        <step>
          <para>Open the <filename>test.script</filename> file and create the
          database objects.</para>
        </step>

        <step>
          <para>Create the empty <filename>test.log</filename> to append any
          data change statements.</para>
        </step>
      </procedure>
    </section>

    <section xml:id="dfa_db_file_restore">
      <title>Restore</title>

      <para>The current <filename>test.data</filename> file is not necessarily
      consistent. The database engine takes these steps:</para>

      <procedure>
        <title>Restore a Database</title>

        <step>
          <para>Restore the old <filename>test.data</filename> file from the
          backup by copying the original sections from the
          <filename>test.backup</filename> file.</para>
        </step>

        <step>
          <para>Execute all the statements in the
          <filename>test.script</filename> file.</para>
        </step>

        <step>
          <para>Execute all statements in the <filename>test.log</filename>
          file. If due to incomplete statements in this file an exception is
          thrown, the rest of the lines in the <filename>test.log</filename>
          file are ignored. This can be overridden with the database
          connection property <literal>hsqldb.full_log_replay=true</literal>
          which results in the startup process to fail and allows the user to
          examine and edit the <filename>test.log</filename> file.</para>
        </step>

        <step>
          <para>Close the database files.</para>
        </step>

        <step>
          <para>Open the restored database.</para>
        </step>
      </procedure>
    </section>
  </section>
</appendix>
