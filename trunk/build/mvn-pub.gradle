defaultTasks 'uploadArchives'

/**
 * @author Blaine Simpson  (blaine dot simpson at admc dot com)
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

signing {
    sign configurations.archives
}

configurations {
    deployJars
}

dependencies {
    if (project.hasProperty('mavenRepository.dest.url')
            && project.property('mavenRepository.dest.url').
            startsWith('scp://'))
        deployJars 'org.apache.maven.wagon:wagon-ssh:2.0'
}

uploadArchives {
    if (!project.hasProperty('mavenRepository.dest.url'))
        // This crap just to satisfy load-time requirement when the
        // uploadArchives task won't even be used.
        project.setProperty('mavenRepository.dest.url', '')
    def authMap = [:]
    if (project.hasProperty('mavenRepository.dest.username'))
        authMap['userName'] = project.property('mavenRepository.dest.username')
    if (project.hasProperty('mavenRepository.dest.password'))
        authMap['password'] = project.property('mavenRepository.dest.password')
    if (project.hasProperty('mavenRepository.dest.privateKey'))
        authMap['privateKey'] =
                project.property('mavenRepository.dest.privateKey')

    repositories.mavenDeployer {
        configuration = configurations.deployJars
        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
        repository(url: project.property('mavenRepository.dest.url')) {
            authentication(authMap)
        }
        addFilter('hsqldb') {artifact, file -> artifact.name == 'hsqldb'}
        addFilter('sqltool') {artifact, file -> artifact.name == 'sqltool'}
        pom.project {
            name "HyperSQL"
            description project.description
            url project.url
            inceptionYear project.inceptionYear
            scm {
                url project.property('scm.url')
                connection project.property('scm.connection')
            }
            licenses {
                license {
                    name 'HSQLDB License, a BSD open source license'
                    url 'http://hsqldb.org/web/hsqlLicense.html'
                    distribution 'repo'
                }
            }
        }
    }
}

uploadArchives { doFirst {
    assert project.hasProperty('group') && project.group != '' :
            "Property 'group' is required by 'uploadArchives' task."
    /*  Unfortunately, Maven plugin has no OOTB way to get a proper
     *  organization name into the descriptors.
     *  TODO:  Test this with Gradle 1.0 milestone 6.
    assert project.hasProperty('organization') && project.organization != '' :
            "Property 'organization' is required by 'uploadArchives' task."
     */
    assert (project.hasProperty('mavenRepository.dest.url')
            && project.property('mavenRepository.dest.url') != ''):
    "Property 'mavenRepository.dest.url' is required by 'uploadArchives' task."

    assert (project.hasProperty('scm.connection')
            && project.hasProperty('scm.url')
            && project.hasProperty('url')
            && project.hasProperty('inceptionYear')) :
            ("Following properties required for 'uploadArchives' task: "
            + 'scm.connection, scm.url, url, inceptionYear')
} }

task jarDep << {
    if (jar.archivePath.exists() && jar.archivePath.lastModified()
            < file('../lib/hsqldb.jar').lastModified()) {
        println "Deleting $jar.archivePath.absolutePath"
        jar.archivePath.delete()
    }
}

jar << {
    File srcFile = file('../lib/hsqldb.jar')
    jar.archivePath.setBytes(srcFile.bytes)
}

jar.dependsOn = [hsqldb, jarDep]
if (project.hasProperty('classifier')) jar.classifier = project.classifier

clean.dependsOn = [prohibitionMap['clean']]

task sqltoolJarDep << {
    if (jar.archivePath.exists() && jar.archivePath.lastModified()
            < file('../lib/sqltool.jar').lastModified()) {
        println "Deleting $sqltoolJar.archivePath.absolutePath"
        sqltoolJar.archivePath.delete()
    }
}

task sqltoolJar(dependsOn: [sqltool, sqltoolJarDep], type: Jar) {
    baseName = 'sqltool'
    if (project.hasProperty('classifier')) classifier = project.classifier
}

sqltoolJar << {
    File srcFile = file('../lib/sqltool.jar')
    sqltoolJar.archivePath.setBytes(srcFile.bytes)
}
 
// add javadoc/source jar tasks as artifacts
artifacts {
    archives sqltoolJar
/*
    archives sourcesJar
    archives javadocJar
*/
}
