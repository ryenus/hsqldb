import org.apache.ivy.core.settings.IvySettings
import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor
import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser
import org.apache.ivy.core.module.descriptor.DependencyDescriptor
import org.apache.ivy.core.module.id.ModuleRevisionId
import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor
import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency
import org.gradle.api.internal.artifacts.dependencies.DefaultDependencyArtifact
import org.gradle.api.internal.artifacts.DefaultExcludeRule
import org.apache.ivy.core.module.descriptor.Configuration.Visibility

/**
 * This Gradle support for 'ivy.xml' is based on contributed fragments in Jira
 * issue for GRADLE-197 at http://issues.gradle.org/browse/GRADLE-197 .
 * The code here does also include my own enhancements.
 *
 * Set project property ivyDepFile to path String to the Ivy dependencies file.
 * This corresponds to Ivy property 'ivy.dep.file'.  Defaults to "ivy.xml".
 *
 * Does not attempt to load any ivysettings files or do any repository setup,
 * only dependency settings.
 * @author Blaine Simpson  (blaine dot simpson at admc dot com)
 */


// configurations apparently not a Collection, since this doesn't work:
//def gradleProjConfMap = configurations.collectEntries { [(it.name): it] }
def gradleProjConfMap = [:]
for (p in configurations) gradleProjConfMap[p.name] = p

DefaultModuleDescriptor moduleDescriptor =
        (DefaultModuleDescriptor) XmlModuleDescriptorParser.instance
        .parseDescriptor(new IvySettings(),
        new File(project.hasProperty('ivyDepFile')
        ? project.ivyDepFile : 'ivy.xml')
        .toURL(), false)
for (def confName in moduleDescriptor.configurationsNames) {
    if (!gradleProjConfMap.containsKey(confName)) continue
    org.apache.ivy.core.module.descriptor.Configuration c =
            moduleDescriptor.getConfiguration(confName)
    Configuration gradleConfig = configurations.getByName(confName)
    for (parentConfName in c.getExtends())
        gradleConfig.extendsFrom(configurations.getByName(parentConfName))
    gradleConfig.transitive = c.transitive
    gradleConfig.visible = c.visibility == Visibility.PUBLIC
    if (gradleConfig.description == null)
        gradleConfig.description = c.description
}
moduleDescriptor.dependencies.each {
    DependencyDescriptor descriptor ->
        def mappableConfNames = descriptor.moduleConfigurations.findAll {
            gradleProjConfMap.containsKey(it)
        }
    for (mappableConfName in mappableConfNames) {
        if (!mappableConfName) return
        ModuleRevisionId id = descriptor.dependencyRevisionId
        DefaultExternalModuleDependency dep =
            new DefaultExternalModuleDependency(id.organisation, id.name,
                    id.revision, descriptor.getDependencyConfigurations(
                    mappableConfName)[0])
        dep.changing = descriptor.changing
        dep.transitive = descriptor.transitive

        descriptor.allDependencyArtifacts.each {
            DependencyArtifactDescriptor depArt ->
                dep.addArtifact(new DefaultDependencyArtifact(
                        depArt.name, depArt.type, depArt.ext, null, depArt.url))
        }

        def excRuleContainer = dep.excludeRules
        descriptor.excludeRules?.values().each {
            def ruleList -> ruleList.each {
                excRuleContainer.add(new DefaultExcludeRule(it.attributes))
            }
        }
        gradleProjConfMap[mappableConfName].getDependencies().add(dep)
    }
}

task displayDeps << {
    if (!project.hasProperty('config.name'))
        throw new GradleException(
            '''Project property 'config.name' required by task 'echoDeps'.''')
    println (configurations[project['config.name']].allDependencies.size()
            + ' dependencies for ' + project['config.name'] + '\n    '
            +  configurations[project['config.name']].asPath
            .replace(System.properties['path.separator'], '\n    '))
}
displayDeps.description = '''Lists Ivy deps only for specified 'config.name'.'''
