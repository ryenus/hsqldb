<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY % dummy22 SYSTEM "../entities/global.ent">
%dummy22;
]>
<chapter version="5.0" xml:id="texttables-chapt"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:id="texttables-title">Text Tables</title>

  <subtitle>Text Tables as a Standard Feature of HSQLDB</subtitle>

  <info>
    <authorgroup>
      <author>
        <personname><firstname>Bob</firstname>
        <surname>Preston</surname></personname>

        <affiliation>
          <orgname>The HSQL Development Group</orgname>
        </affiliation>
      </author>

      <author>
        <personname><firstname>Fred</firstname>
        <surname>Toussi</surname></personname>

        <affiliation>
          <orgname>The HSQL Development Group</orgname>
        </affiliation>
      </author>
    </authorgroup>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>&timestamp;</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>SQL</keyword>

      <keyword>Text</keyword>

      <keyword>Tables</keyword>
    </keywordset>

    <legalnotice>
      <para>Copyright 2002-2020 Bob Preston and Fred Toussi. Permission is
      granted to distribute this document without any alteration under the
      terms of the HSQLDB license. Additional permission is granted to the
      HSQL Development Group to distribute this document with or without
      alterations under the terms of the HSQLDB license.</para>
    </legalnotice>
  </info>

  <section xml:id="ttc_overview">
    <title>Overview</title>

    <para>Text Table support for HSQLDB was originally developed by Bob
    Preston independently from the Project. Subsequently Bob joined the
    Project and incorporated this feature into version 1.7.0, with a number of
    enhancements, especially the use of SQL commands for specifying the files
    used for Text Tables.</para>

    <para>In a nutshell, Text Tables are CSV or other delimited files treated
    as SQL tables. Any ordinary CSV or other delimited file can be used. The
    full range of SQL queries can be performed on these files, including
    SELECT, INSERT, UPDATE and DELETE. Indexes and unique constraints can be
    set up, and foreign key constraints can be used to enforce referential
    integrity between Text Tables themselves or with conventional
    tables.</para>

    <para>The delimited file can be created by the engine, or an existing file
    can be used.</para>

    <para>HyperSQL with Text Table support is the only comprehensive solution
    that employs the power of SQL and the universal reach of JDBC to handle
    data stored in text files.</para>
  </section>

  <section xml:id="ttc_implementation">
    <title>The Implementation</title>

    <section xml:id="ttc_table_definition">
      <title>Definition of Tables</title>

      <para>Text Tables are defined similarly to conventional tables with the
      added TEXT keyword.</para>

      <informalexample>
        <programlisting> CREATE TEXT TABLE &lt;tablename&gt; (&lt;column definition&gt; [&lt;constraint definition&gt;])</programlisting>
      </informalexample>

      <para>The table is at first empty and cannot be written to. An
      additional SET command specifies the file and the separator character
      that the Text table uses. It assigns the file to the table.</para>

      <informalexample>
        <programlisting> SET TABLE &lt;tablename&gt; SOURCE &lt;quoted_filename_and_options&gt; [DESC]</programlisting>
      </informalexample>
    </section>

    <section xml:id="ttc_scope">
      <title>Scope and Reassignment</title>

      <itemizedlist>
        <listitem>
          <para>A Text table without a file assigned to it is READ ONLY and
          EMPTY.</para>
        </listitem>

        <listitem>
          <para>Reassigning a Text Table definition to a new file has
          implications in the following areas:</para>

          <orderedlist>
            <listitem>
              <para>The user is required to be an administrator.</para>
            </listitem>

            <listitem>
              <para>Existing transactions are committed at this point.</para>
            </listitem>

            <listitem>
              <para>Constraints, including foreign keys referencing this
              table, are kept intact but not checked. It is the responsibility
              of the administrator to ensure their integrity.</para>
            </listitem>
          </orderedlist>

          <para>The new source file is scanned and indexes are built when it
          is assigned to the table. At this point any violation of NOT NULL,
          UNIQUE or PRIMARY KEY constraints are caught and the assignment is
          aborted. However, foreign key constraints are not checked at the
          time of assignment or reassignment of the source file.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="ttc_nulls">
      <title>Null Values in Columns of Text Tables</title>

      <itemizedlist>
        <listitem>
          <para>Empty fields are treated as NULL. These are fields where there
          is nothing or just spaces between the separators.</para>
        </listitem>

        <listitem>
          <para>Quoted empty strings are treated as empty strings.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="ttc_configuration">
      <title>Configuration</title>

      <para>The default field separator is a comma (,). A different field
      separator can be specified within the SET TABLE SOURCE statement. For
      example, to change the field separator for the table mytable to a
      vertical bar, place the following in the SET TABLE SOURCE statement, for
      example:</para>

      <informalexample>
        <programlisting> SET TABLE mytable SOURCE "myfile;fs=|"</programlisting>
      </informalexample>

      <para>Since HSQLDB treats CHAR and VARCHAR strings the same, the ability
      to assign a different separator to the latter is provided. When a
      different separator is assigned to a VARCHAR, it will terminate any CSV
      field of that type. For example, if the first field is CHAR, and the
      second field VARCHAR, and the separator <literal>fs</literal> has been
      defined as the pipe (|) and <literal>vs</literal> as the period (.) then
      the data in the CSV file for a row will look like:</para>

      <screen> First field data|Second field data.Third field data</screen>

      <para>This facility in effect offers an extra, special separator which
      can be used in addition to the global separator. The following example
      shows how to change the default separator to the pipe (|), VARCHAR
      separator to the period (.) within a SET TABLE SOURCE statement:</para>

      <informalexample>
        <programlisting> SET TABLE mytable SOURCE "myfile;fs=|;vs=."</programlisting>
      </informalexample>

      <para>HSQLDB also recognises the following special indicators for
      separators:</para>

      <variablelist>
        <title>special indicators for separators</title>

        <varlistentry>
          <term>\semi</term>

          <listitem>
            <para>semicolon</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\quote</term>

          <listitem>
            <para>single-quote</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\space</term>

          <listitem>
            <para>space character</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\apos</term>

          <listitem>
            <para>apostrophe</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\colon</term>

          <listitem>
            <para>colon character</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\n</term>

          <listitem>
            <para>newline - Used as an end anchor (like $ in regular
            expressions)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\r</term>

          <listitem>
            <para>carriage return</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\t</term>

          <listitem>
            <para>tab</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\\</term>

          <listitem>
            <para>backslash</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\u####</term>

          <listitem>
            <para>a Unicode character specified in hexadecimal</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Furthermore, HSQLDB provides csv file support with three
      additional boolean options: <varname>ignore_first</varname>,
      <varname>quoted</varname> and <varname>all_quoted</varname>. The
      <varname>ignore_first</varname> option (default false) tells HSQLDB to
      ignore the first line in a file. This option is used when the first line
      of the file contains column headings or other title information. The
      first line consists of the characters before the first end-of-line
      symbol (line feed, carriage return, etc). It is simply set aside and not
      processed. The <varname>all_quoted</varname> option (default false)
      tells the program that it should use quotes around all character fields
      when writing to the source file. The <varname>quoted</varname> option
      (default true) uses quotes only when necessary to distinguish a field
      that contains the separator character. It can be set to false to prevent
      the use of quoting altogether and treat quote characters as normal
      characters. All these options may be specified within the <literal>SET
      TABLE SOURCE</literal> statement:</para>

      <informalexample>
        <programlisting> SET TABLE mytable SOURCE "myfile;ignore_first=true;all_quoted=true"</programlisting>
      </informalexample>

      <para>When the default options <literal>all_quoted=</literal>
      <literal>false</literal> and <literal>quoted=true</literal> are in
      force, fields that are written to a line of the csv file will be quoted
      only if they contain the separator or the quote character. The quote
      character inside the field is doubled when written out to the file. When
      <literal>all_quoted=false</literal> and <literal>quoted=false</literal>
      the quote character is not doubled. With this option, it is not possible
      to insert any string containing the separator into the table, as it
      would become impossible to distinguish from a separator. While reading
      an existing data source file, the program treats each individual field
      separately. It determines that a field is quoted only if the first
      character is the quote character. It interprets the rest of the field on
      this basis.</para>

      <para>The setting, <literal>null_def</literal>, can be used to simplify
      importing text files containing empty fields. These fields are
      interpreted as null but the user may want an empty string or another
      default value instead of null. With <literal>null_def=true</literal>
      defined in the text source string, and a table column that is defined as
      <literal>DEFAULT &lt;val&gt; NOT NULL</literal> with a constant value
      for the default, the default value will be used instead of any empty or
      NULL field.</para>

      <para>The character encoding for the source file is<literal> ASCII
      </literal>by default, which corresponds to the 8-bit ANSI character set.
      To support UNICODE or source files prepared with different encodings
      this can be changed to <literal>UTF-8</literal> or any other encoding.
      The default is <literal>encoding=ASCII </literal>and the option
      <literal>encoding=UTF-8</literal> or other supported encodings can be
      used. From version 2.3.4, the two-byte-per-character encodings of UTF-16
      are also supported. The <literal>encoding=UTF-16BE</literal> is
      big-endian, while <literal>encoding=UTF-16LE</literal> is little-endian.
      The <literal>encoding=UTF-16</literal> is big-endian by default. This
      encoding reads a special Unicode character called BOM if it is present
      at the beginning of an existing file and if this character indicates
      little-endian, the file is treated as such. Note HSQLDB does not write a
      BOM character to the files it creates from scratch.</para>

      <para>Finally, HSQLDB provides the ability to read a text file as READ
      ONLY, by placing the keyword "DESC" at the end of the SET TABLE SOURCE
      statement:</para>

      <informalexample>
        <programlisting> SET TABLE mytable SOURCE "myfile" DESC</programlisting>
      </informalexample>

      <para>Text table source files are cached in memory. The maximum number
      of rows of data that are in memory at any time is controlled by the
      <varname>cache_rows</varname> property. The default value for
      <varname>cache_rows</varname> is 1000 and can be changed by setting the
      default database property. The <varname>cache_size</varname> property
      sets the maximum amount of memory used for each text table. The default
      is 100 KB. The properties can be set for individual text tables. These
      properties do not control the maximum size of each text table, which can
      be much larger. An example is given below:</para>

      <informalexample>
        <programlisting> SET TABLE mytable SOURCE "myfile;ignore_first=true;all_quoted=true;cache_rows=10000;cache_size=1000"</programlisting>
      </informalexample>

      <para>The properties used in earlier versions, namely the
      <varname>textdb.cache_scale</varname> and the
      <varname>textdb.cache_size_scale</varname> can still be used for
      backward compatibility, but the new properties are preferred.</para>

      <variablelist>
        <title>Supported Properties</title>

        <varlistentry>
          <term>quoted = { true | false }</term>

          <listitem>
            <para>default is true. If false, treats double quotes as normal
            characters</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>all_quoted = { true | false }</term>

          <listitem>
            <para>default is false. If true, adds double quotes around all
            fields.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>encoding = &lt;encoding name&gt;</term>

          <listitem>
            <para>character encoding for text and character fields, for
            example, encoding=UTF-8. UTF-16, UTF-16BE, UTF-16LE can also be
            used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>ignore_first = { true | false }</term>

          <listitem>
            <para>default is false. If true ignores the first line of the
            file</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>null_def = { true | false }</term>

          <listitem>
            <para>default is false. If true, replaces any null or empty fields
            in the text file rows with the column default value of the
            not-null column</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>cache_rows= &lt;numeric value&gt;</term>

          <listitem>
            <para>rows of the text file in the cache. Default is 1000
            rows</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>cache_size = &lt;numeric value&gt;r</term>

          <listitem>
            <para>total size of the rows in the cache. Default is 100
            KB.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>cache_scale= &lt;numeric value&gt; and cache_size_scale =
          &lt;numeric value&gt;</term>

          <listitem>
            <para>deprecated properties, replaced by cached_rows and
            cache_size properties above.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>fs = &lt;unquoted character&gt;</term>

          <listitem>
            <para>field separator</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>vs = &lt;unquoted character&gt;</term>

          <listitem>
            <para>varchar separator</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>qc = &lt;unquoted character&gt;</term>

          <listitem>
            <para>quote character</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="ttc_disconnect">
      <title>Disconnecting Text Tables</title>

      <para>Text tables may be <glossterm>disconnected</glossterm> from their
      underlying data source, i.e. the text file.</para>

      <para>You can explicitly disconnect a text table from its file by
      issuing the following statement: <informalexample>
          <programlisting> SET TABLE mytable SOURCE OFF</programlisting>
        </informalexample></para>

      <para>Subsequently, <literal>mytable</literal> will be empty and
      read-only. However, the data source description will be preserved, and
      the table can be re-connected to it with <informalexample>
          <programlisting> SET TABLE mytable SOURCE ON</programlisting>
        </informalexample></para>

      <para>When a database is opened, if the source file for an existing text
      table is missing, the table remains disconnected from its data source
      but the source description is preserved. This allows the missing source
      file to be added to the directory and the table re-connected to it with
      the above command.</para>

      <para>Disconnecting text tables from their source has several uses.
      While disconnected, the text source can be edited outside HSQLDB,
      provided data integrity is respected. When large text sources are used,
      and several constraints or indexes need to be created on the table, it
      is possible to disconnect the source during the creation of constraints
      and indexes and reduce the time it takes to perform the
      operation.</para>
    </section>
  </section>

  <section xml:id="ttc_issues">
    <title>Text File Usage</title>

    <para>The following information applies to the usage of text
    tables.</para>

    <itemizedlist>
      <title>Text File Issues</title>

      <listitem>
        <para>With file databases, text file locations are restricted to below
        the directory that contains the database, unless the
        <varname>textdb.allow_full_path</varname> property is set true as a
        Java system property. This feature is for security, otherwise an admin
        database user may be able to open random files. The specified text
        source path is interpreted differently according to this property. By
        default, the path is interpreted as a relative path to the directory
        path of database files, it therefore cannot contain the double dot
        notation for parent directory. This path is then appended by the
        engine to the directory path to form a full path.</para>

        <para>When the property is true, and the path starts with the forward
        slash or back slash, or the path contains a semicolon, the path is not
        appended to the directory path and is used as it is to open the file.
        In this usage the path is absolute.</para>
      </listitem>

      <listitem>
        <para>By default, all-in-memory databases cannot use text tables. To
        enable this capability the <varname>textdb.allow_full_path</varname>
        property must be set <literal>true</literal> as a Java system
        property. The text file path is used as submitted and interpreted as
        an absolute path as described above, or a path relative to the Java
        process execute path. These text tables are always read-only.</para>
      </listitem>

      <listitem>
        <para>Databases store in jars or as files on the classpath and opened
        with the res: protocol can reference read-only text files. These files
        are opened as resources. The file path is an absolute path beginning
        with a forward slash.</para>
      </listitem>

      <listitem>
        <para>Blank lines are allowed anywhere in the text file, and are
        ignored.</para>
      </listitem>

      <listitem>
        <para>It is possible to define a primary key, identity column, unique,
        foreign key and check constraints for text tables.</para>
      </listitem>

      <listitem>
        <para>When a table source file is used with the<literal>
        ignore_first=true </literal>option, the first, ignored line is
        replaced with a blank line after a SHUTDOWN COMPACT, unless the SOURCE
        HEADER statement has been used.</para>
      </listitem>

      <listitem>
        <para>An existing table source file may include CHARACTER fields that
        do not begin with the quote character but contain instances of the
        quote character. These fields are read as literal strings.
        Alternatively, if any field begins with the quote character, then it
        is interpreted as a quoted string that should end with the quote
        character and any instances of the quote character within the string
        is doubled. When any field containing the quote character or the
        separator is written out to the source file by the program, the field
        is enclosed in quote character and any instance of the quote character
        inside the field is doubled.</para>
      </listitem>

      <listitem>
        <para>Inserts or updates of CHARACTER type field values are allowed
        with strings that contains the linefeed or the carriage return
        character. This feature is disabled when both quoted and all_quoted
        properties are false.</para>
      </listitem>

      <listitem>
        <para>ALTER TABLE commands that add or drop columns or constraints
        (apart from check constraints) are not supported with text tables that
        are connected to a source. First use the SET TABLE &lt;name&gt; SOURCE
        OFF, make the changes, then turn the source ON.</para>
      </listitem>

      <listitem>
        <para>Use the default setting (quoted=true) for selective quoting of
        fields. Those fields that need quoting are quoted, other not.</para>
      </listitem>

      <listitem>
        <para>Use the quoted=false setting to avoid quoting of fields
        completely. With this setting any quote character is considered part
        of the text.</para>
      </listitem>

      <listitem>
        <para>Use the all_quoted=true setting to force all fields to be
        quoted.</para>
      </listitem>

      <listitem>
        <para>You can choose the quote character. The default is the
        double-quote character.</para>
      </listitem>

      <listitem>
        <para>SHUTDOWN COMPACT results in a complete rewrite of text table
        sources that are open at the time. The settings for quoted and
        all_quoted are applied for the rewrite.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="ttc_global_props">
    <title>Text File Global Properties</title>

    <para>The database engine uses a set of defaults for text table
    properties. Each table's data source may override these defaults. It is
    also possible to override the defaults globally, so they apply to all text
    tables. The statement SET DATABASE TEXT TABLE DEFAULTS &lt;properties
    string&gt; can be used to override the default global properties. An
    example is given below:</para>

    <para><informalexample>
        <programlisting> SET DATABASE TEXT TABLE DEFAULTS 'all_quoted=true;encoding=UTF-8;cache_rows=10000;cache_size=2000'</programlisting>
      </informalexample></para>

    <itemizedlist>
      <title>List of supported global properties</title>

      <listitem>
        <para><literal>qc="</literal></para>
      </listitem>

      <listitem>
        <para><literal>fs=,</literal></para>
      </listitem>

      <listitem>
        <para><literal>vs=,</literal></para>
      </listitem>

      <listitem>
        <para><literal>quoted=true</literal></para>
      </listitem>

      <listitem>
        <para><literal>all_quoted=false</literal></para>
      </listitem>

      <listitem>
        <para><literal>ignore_first=false</literal></para>
      </listitem>

      <listitem>
        <para><literal>null_def=false</literal></para>
      </listitem>

      <listitem>
        <para><literal>encoding=ASCII</literal></para>
      </listitem>

      <listitem>
        <para><literal>cache_rows=1000</literal></para>
      </listitem>

      <listitem>
        <para><literal>cache_size=100</literal></para>
      </listitem>

      <listitem>
        <para><literal>textdb.allow_full_path=false (a system
        property)</literal></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="ttc_transactions">
    <title>Transactions</title>

    <para>Text tables fully support transactions. New or changed rows that
    have not been committed are not updated in the source file. Therefore, the
    source file always contains committed rows.</para>

    <para>However, text tables are not as resilient to machine crashes as
    other types of tables. If the crash happens while the text source is being
    written to, the text source may contain only some of the changes made
    during a committed transaction. With other types of tables, additional
    mechanisms ensure the integrity of the data and this situation will not
    arise.</para>
  </section>
</chapter>
