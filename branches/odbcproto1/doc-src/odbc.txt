$Id$

This file documents various aspects of HyerSQL's ODBC support.
It does not document driver-side issues (at least once we can discriminate),
since those issues will be documented with the dedicated ODBC driver product.

Critical server-side todo items.

    + Test rollbacks.  Good chance that they work correctly now.

    + Support passing of size/precision/scale values for columns to the ODBC
      client.  I guess the client uses this for display formatting purposes (I
      don't know any other reason why the client would want the value, since
      the database, not the client, enforces conformance).
      It's quite possible that no real purpose is served.  In that case we can
      greatly improve efficiency of the PgType class by sharing a static list
      of elements instead of making tons of PgType instances.

    + Support binary database data types (BINARY, OBJECT, etc.)

    + Support TIME and DATETIME database data types (DATEs already supported)
      (May want to postpone *INTERVAL* types for another iteration).

    + Complete implementation of SIMPLE mode BEGIN, SAVEPOINT, RELEASE
      prefixes and suffixes, according to my source code comments.

    + Verify tactic used to generate numeric "object identifiers" for tables
      is adequate: Java has of String "schema.tablename".

    + Fix column oid (numeric object identifier) generation tactic.  I am
      just returning the sequence in the generated result set.  The problem
      with this tactic is that the number for a column is dependent upon
      the query instead of on the table definition.

    + Check that tracking of inOdbcTrans is adequate.  This is used to keep
      client informed of transaction state (via Z packets), and whether to
      perform implicit commits or rollback when processing S (sync) packets.
      May need to keep track of SQL execution failures in order to
      implicitly roll back (at same location where we implicitly commit).
      Probably need to check current AUTOCOMMIT setting and modify behavior
      accordingly.


KNOWN LIMITATIONS

    Limitations corresponding to the TODO items above.

    No metadata querying ability, other than the ones implicit with setting
    up prepared statements (including the 'D'

    Don't know if it is a bug with Sun's jdbc:odbc or with psqlodbc, but
    all fetchsize settings are rejected with a message saying that the
    value is unacceptable.

    psqlodbc can handle compound commands (*;*) only in SIMPLE (Q) mode; and
    even that needs to be tested to see if server will generate the expected
    number of reply packets.


POSTGRESQL DEPENDENCIES TO BE ELIMINATED (uncertain whether will handle these
 on client or server side).
Search ServerConnection.java (from odbcproto1 branch) for comments about
 "stub" and "swallow", ignoring stuff about client side swallowing.
Over-the-wire Postgresql-specific SQL commands that must be handled.
    SELECT
    PREPARE/EXECUTE/DEALLOCATE
    SET/SHOW
    DECLARE/FETCH/MOVE/CLOSE
psqlodbc source code locations
    The info30.c file seems to be good (ODBC v.3 metadata)
    connect.c
        select oid,... upon startup.
        current_schema()
    convert.c
        Uses ctid pseudo-column
        convert_escape() generates queries.  Func. should probably be
         eliminated.
        copy_statement_with_parameters looks dependent upon PostgresQL
         PREPARE SQL statements.
         (this calls Prepare_and_convert(), which also depends on them).
    multibyte.c
        CC_lookup_cs_new()  Not run from Linux driver.  Test whether
         called from CC_lookup_characterset() from Windows ANSI client.
    parse.c
        CheckHasOids()
        getCOLIfromTable()
    results.c
        tupleExists()  uses ctid pseudo-column
Literal commands known to be sent over the wire:

    select n.nspname, c.relname, a.attname, a.atttypid,t.typname, a.attnum, a.attlen, a.atttypmod, a.attnotnull, c.relhasrules, c.relkind, c.oid, d.adsrc from (((pg_catalog.pg_class c inner join pg_catalog.pg_namespace n on n.oid = c.relnamespace and c.oid = 3411470544) inner join pg_catalog.pg_attribute a on (not a.attisdropped) and a.attnum > 0 and a.attrelid = c.oid) inner join pg_catalog.pg_type t on t.oid = a.atttypid) left outer join pg_attrdef d on a.atthasdef and d.adrelid = a.attrelid and d.adnum = a.attnum order by n.nspname, c.relname, attnum

    select current_schema()

    select oid, typbasetype from pg_type where typname = 'lo'

    deallocate <cursorname> (all cases I've encountered so far seem to be
     an over-zealous attempt by the driver to free cursors managed completely
     EXTENDED protocol, and therefore my server code can handle these).

    set client_encoding to...

Literal commands I see in code, but have not yet taken the time to confirm or
reject as will ever be sent to our server.  Repeat:  THESE STATEMENTS MAY
NEVER BE SENT.  I will have a definitive answer about several of these shortly.:

    "select oid, 0 from pg_type where typname='" PG_TYPE_LO_NAME "'"

    Dynamic queries with: " where ctid = '(0,0)';select \"ctid"... from...

    All sorts of metadata/data-dictionary stuff in "info.c" file.

    select relhasoids, c.oid from pg_class c, pg_namespace n where relname = '%s' and nspname = '%s' and c.relnamespace = n.oid"

    "select a.attname, a.atttypid from pg_index i, pg_attribute a where indrelid=%u and indnatts=1 and indisunique
 and indexprs is null and indpred is null and i.indrelid = a.attrelid and a.attnum=i.indkey[0] and attnotnull and atttypid in (%d, %d)"

    "select nspname from pg_namespace n, pg_class c"

    "select 1 from \"%s\" where ctid = '(%d,%d)'"

    Complex dynamic parsing or genereration code in conver.tc:convert_escape().


REFERENCES

    psqlodbc code repository.  Module "psqlodbc" at
      :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/psqlodbc
    This is the code base that our odbc driver forked from.

    Protocol specification:
    http://www.postgresql.org/docs/8.3/interactive/protocol.html

    Article on ODBC escape sequences.  May support these some day.
    http://www.ibprovider.com/eng/documentation/odbc_escape_sequences_eng.html
